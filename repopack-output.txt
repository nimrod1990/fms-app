This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-25T15:37:56.041Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
public/
  vite.svg
src/
  assets/
    react.svg
  components/
    PersonalInfoForm.tsx
    ProgressBar.tsx
    Summary.tsx
    Test.tsx
  data/
    fmsData.ts
  styles/
    App.css
  utils/
    markdown.ts
  App.tsx
  index.css
  main.tsx
  types.ts
  vite-env.d.ts
.gitignore
eslint.config.js
index.html
package.json
README.md
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: src/components/PersonalInfoForm.tsx
================
// src/components/PersonalInfoForm.tsx
import React, { useState } from 'react';
import { PersonalInfo } from '../types';

interface PersonalInfoFormProps {
  onSubmit: (info: PersonalInfo) => void;
}

const PersonalInfoForm: React.FC<PersonalInfoFormProps> = ({ onSubmit }) => {
  // 获取今天的日期，格式为 YYYY-MM-DD
  const getTodayDate = () => {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const day = String(today.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  };

  const [name, setName] = useState('');
  const [testDate, setTestDate] = useState(getTodayDate());
  const [dominantHand, setDominantHand] = useState('右手');
  const [dominantFoot, setDominantFoot] = useState('右脚');
  const [tester, setTester] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (name && testDate && tester) {
      onSubmit({ name, testDate, dominantHand, dominantFoot, tester });
    } else {
      alert('请完整填写所有必填信息。');
    }
  };

  return (
    <form className="personal-info-form" onSubmit={handleSubmit}>
      <h1>功能动作筛查 (FMS)</h1>
      <div className="form-group">
        <label>被测试者姓名：</label>
        <input type="text" value={name} onChange={(e) => setName(e.target.value)} required />
      </div>
      <div className="form-group">
        <label>测试时间：</label>
        <input
          type="date"
          value={testDate}
          onChange={(e) => setTestDate(e.target.value)}
          required
        />
      </div>
      <div className="form-group">
        <label>优势手：</label>
        <select value={dominantHand} onChange={(e) => setDominantHand(e.target.value)}>
          <option value="左手">左手</option>
          <option value="右手">右手</option>
        </select>
      </div>
      <div className="form-group">
        <label>优势脚：</label>
        <select value={dominantFoot} onChange={(e) => setDominantFoot(e.target.value)}>
          <option value="左脚">左脚</option>
          <option value="右脚">右脚</option>
        </select>
      </div>
      <div className="form-group">
        <label>测试者：</label>
        <input type="text" value={tester} onChange={(e) => setTester(e.target.value)} required />
      </div>
      <button type="submit">开始测试</button>
    </form>
  );
};

export default PersonalInfoForm;

================
File: src/components/ProgressBar.tsx
================
import React from 'react';

interface ProgressBarProps {
  progress: number; // 进度，取值 0 - 100
}

const ProgressBar: React.FC<ProgressBarProps> = ({ progress }) => {
  return (
    <div className="progress-bar-container">
      <div className="progress-bar" style={{ width: `${progress}%` }}>
        <span>{Math.round(progress)}%</span>
      </div>
    </div>
  );
};

export default ProgressBar;

================
File: src/components/Summary.tsx
================
// src/components/Summary.tsx
import React from 'react';
import { TestResult, PersonalInfo } from '../types';
import { generateMarkdown } from '../utils/markdown';

interface SummaryProps {
  results: TestResult[];
  personalInfo: PersonalInfo;
}

const Summary: React.FC<SummaryProps> = ({ results, personalInfo }) => {
  const totalScore = results.reduce((sum, result) => sum + result.score, 0);

  const handleExport = () => {
    const markdownContent = generateMarkdown(results, personalInfo);
    const blob = new Blob([markdownContent], { type: 'text/markdown;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'FMS评估结果.md';
    link.click();
  };

  return (
    <div className="summary-container">
      <h2>评估结果</h2>
      <div className="personal-info">
        <p>被测试者姓名：{personalInfo.name}</p>
        <p>测试时间：{personalInfo.testDate}</p>
        <p>优势手：{personalInfo.dominantHand}</p>
        <p>优势脚：{personalInfo.dominantFoot}</p>
        <p>测试者：{personalInfo.tester}</p>
        <p>总分：{totalScore} / 21</p>
      </div>
      <div className="results-chart">
        {/* 可以在这里添加图表组件来可视化结果 */}
        {/* 由于不使用外部库，这里以简单的方式展示 */}
        <ul>
          {results.map((result, index) => (
            <li key={index}>
              <strong>{result.testName}</strong>: 得分 {result.score}
              {result.clearingTest && (
                <span>（清除测试选择“是”，得分设为0）</span>
              )}
            </li>
          ))}
        </ul>
      </div>
      <div className="evaluation">
        <h3>测量结果的评价</h3>
        {/* 根据得分提供具体的评价 */}
        {totalScore < 14 ? (
          <p>您的总分低于14，存在较高的受伤风险，建议进行针对性的功能训练。</p>
        ) : (
          <p>您的总分高于14，受伤风险较低，请继续保持良好的运动状态。</p>
        )}
        {/* 对每个测试项进行评价 */}
        {results.map((result) => {
          if (result.score === 1) {
            return (
              <p key={result.testName}>
                在<strong>{result.testName}</strong>项目中得分为1，建议加强该部位的功能训练。
              </p>
            );
          }
          if (result.score === 0) {
            return (
              <p key={result.testName}>
                在<strong>{result.testName}</strong>过程中有疼痛，建议咨询专业医生。
              </p>
            );
          }
          return null;
        })}
      </div>
      <button onClick={handleExport}>导出为 Markdown</button>
    </div>
  );
};

export default Summary;

================
File: src/components/Test.tsx
================
// src/components/Test.tsx
import React, { useState, useEffect } from 'react';
import { TestItem, TestResult } from '../types';

interface TestProps {
  test: TestItem;
  onNext: (score: number, clearingTest: boolean | null) => void;
  onBack?: () => void;
  existingResult?: TestResult | null;
}

const Test: React.FC<TestProps> = ({ test, onNext, onBack, existingResult }) => {
  // 初始化选中的分数
  const [selectedScore, setSelectedScore] = useState<number | null>(
    existingResult ? (existingResult.score === 0 && test.clearing_test ? 0 : existingResult.score) : null
  );
  
  // 初始化清除测试结果
  const [clearingTestResult, setClearingTestResult] = useState<boolean | null>(
    test.clearing_test ? (existingResult ? existingResult.clearingTest : null) : false
  );

  // 如果清除测试选择“是”，则清除分数选择
  useEffect(() => {
    if (clearingTestResult) {
      setSelectedScore(null);
    }
  }, [clearingTestResult]);

  const handleSubmit = () => {
    if (
      (test.clearing_test && clearingTestResult !== null) ||
      !test.clearing_test
    ) {
      if (
        (selectedScore !== null && !clearingTestResult) ||
        (test.clearing_test && clearingTestResult === true)
      ) {
        onNext(selectedScore || 0, clearingTestResult);
      } else {
        alert('请完成所有选项');
      }
    } else {
      alert('请完成所有选项');
    }
  };

  return (
    <div className="test-container">
      <h2>{test.test_name}</h2>
      <h3>评分标准：</h3>
      <ul>
        {test.scores.map((scoreItem) => (
          <li key={scoreItem.score}>
            <label>
              <input
                type="radio"
                name={`score-${test.test_name}`} // 确保 name 属性唯一
                value={scoreItem.score}
                onChange={() => setSelectedScore(scoreItem.score)}
                disabled={clearingTestResult === true} // 禁用分数选择
                checked={selectedScore === scoreItem.score}
              />
              {`得分 ${scoreItem.score}: ${scoreItem.criteria}`}
            </label>
          </li>
        ))}
      </ul>
      {test.clearing_test && (
        <div className="clearing-test-section">
          <h3>清除测试：</h3>
          <p>{test.clearing_test}</p>
          <label>
            <input
              type="radio"
              name={`clearingTest-${test.test_name}`} // 确保 name 属性唯一
              value="yes"
              onChange={() => setClearingTestResult(true)}
              checked={clearingTestResult === true}
            />
            是（此选择将自动将本项得分设为0）
          </label>
          <label>
            <input
              type="radio"
              name={`clearingTest-${test.test_name}`} // 确保 name 属性唯一
              value="no"
              onChange={() => setClearingTestResult(false)}
              checked={clearingTestResult === false}
            />
            否
          </label>
        </div>
      )}
      <div className="button-group">
        {onBack && (
          <button type="button" onClick={onBack}>
            返回上一页
          </button>
        )}
        <button type="button" onClick={handleSubmit}>
          下一步
        </button>
      </div>
    </div>
  );
};

export default Test;

================
File: src/data/fmsData.ts
================
// src/data/fmsData.ts
import { FMSData } from '../types';

const data: FMSData = {
  title: '功能动作筛查 (FMS)',
  categories: [
    {
      test_name: '深蹲 (Deep Squat)',
      scores: [
        {
          score: 3,
          criteria: '躯干与胫骨平行，股骨低于水平线，膝盖与脚对齐，杠杆与脚对齐。'
        },
        {
          score: 2,
          criteria: '脚跟抬高，但动作与得分3相同。'
        },
        {
          score: 1,
          criteria: '脚跟抬高，动作存在重大功能障碍。'
        },
        {
          score: 0,
          criteria: '运动过程中有疼痛。'
        }
      ]
    },
    {
      test_name: '跨栏步 (Hurdle Step)',
      scores: [
        {
          score: 3,
          criteria: '髋、膝、踝对齐，腰椎活动最小或无活动，杠杆和栏杆保持平行。'
        },
        {
          score: 2,
          criteria: '保持平衡，但有代偿性运动。'
        },
        {
          score: 1,
          criteria: '脚接触栏杆或失去平衡。'
        },
        {
          score: 0,
          criteria: '运动过程中有疼痛。'
        }
      ]
    },
    {
      test_name: '直线弓步 (Inline Lunge)',
      scores: [
        {
          score: 3,
          criteria: '保持杠杆接触，无躯干运动，杠杆和脚在矢状面，膝盖触碰脚跟后的板子。'
        },
        {
          score: 2,
          criteria: '有代偿性运动，但保持平衡。'
        },
        {
          score: 1,
          criteria: '失去平衡或错位。'
        },
        {
          score: 0,
          criteria: '运动过程中有疼痛。'
        }
      ]
    },
    {
      test_name: '肩部灵活性 (Shoulder Mobility)',
      scores: [
        {
          score: 3,
          criteria: '两拳之间的距离在一手长度内。'
        },
        {
          score: 2,
          criteria: '两拳之间的距离在一手半长度内。'
        },
        {
          score: 1,
          criteria: '两拳之间的距离大于一手半长度。'
        },
        {
          score: 0,
          criteria: '运动过程中有疼痛。'
        }
      ],
      clearing_test: '肩夹击测试：受试者将手臂置于肩后，用另一只手触碰对侧肩胛骨，若此动作引发疼痛，得分为0分。'
    },
    {
      test_name: '主动直腿抬高 (Active Straight Leg Raise)',
      scores: [
        {
          score: 3,
          criteria: '踝关节位于大腿中部与髂前上棘 (ASIS) 之间。'
        },
        {
          score: 2,
          criteria: '踝关节位于大腿中部与膝关节线之间。'
        },
        {
          score: 1,
          criteria: '踝关节位于膝关节线以下。'
        },
        {
          score: 0,
          criteria: '运动过程中有疼痛。'
        }
      ]
    },
    {
      test_name: '躯干稳定性俯卧撑 (Trunk Stability Push-Up)',
      scores: [
        {
          score: 3,
          criteria: '身体作为一个整体抬起，脊柱没有滞后，拇指与头顶（男性）或下巴（女性）对齐。'
        },
        {
          score: 2,
          criteria: '男性：拇指与下巴对齐；女性：拇指与锁骨对齐。'
        },
        {
          score: 1,
          criteria: '无法正确完成动作。'
        },
        {
          score: 0,
          criteria: '运动过程中有疼痛。'
        }
      ],
      clearing_test: '脊柱伸展清除测试：受试者跪姿，臀部后坐，上身向下压，若此动作引发疼痛，得分为0分。'
    },
    {
      test_name: '旋转稳定性 (Rotary Stability)',
      scores: [
        {
          score: 3,
          criteria: '正确完成单侧重复动作，保持平衡。'
        },
        {
          score: 2,
          criteria: '无法正确完成单侧动作，但保持平衡。'
        },
        {
          score: 1,
          criteria: '无法完成单侧动作，失去平衡。'
        },
        {
          score: 0,
          criteria: '运动过程中有疼痛。'
        }
      ],
      clearing_test: '脊柱屈曲清除测试：通过伏地挺身观察脊柱屈曲是否引发疼痛，若有疼痛，得分为0分。'
    }
  ]
};

export default data;

================
File: src/styles/App.css
================
/* src/styles/App.css */

/* 通用样式 */
body {
  font-family: 'Helvetica Neue', Arial, sans-serif;
  margin: 0;
  padding: 0;
  color: #333;
  background-color: #f9f9f9;
}

h1, h2, h3 {
  font-weight: 600;
}

a {
  color: #007bff;
  text-decoration: none;
}

button {
  background-color: #007bff;
  color: #fff;
  border: none;
  padding: 12px 24px;
  margin: 16px 0;
  border-radius: 4px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}

/* 个人信息表单样式 */
.personal-info-form {
  max-width: 600px;
  margin: 40px auto;
  padding: 40px;
  background-color: #fff;
  border-radius: 8px;
}

.personal-info-form h1 {
  margin-bottom: 24px;
}

.form-group {
  margin-bottom: 16px;
}

.form-group label {
  display: block;
  margin-bottom: 8px;
}

.form-group input, .form-group select {
  width: 100%;
  padding: 8px;
  box-sizing: border-box;
}

/* 测试页面样式 */
.app-container {
  max-width: 800px;
  margin: 20px auto;
  padding: 0 20px;
}

.test-container {
  background-color: #fff;
  padding: 24px;
  border-radius: 8px;
}

.test-container h2 {
  margin-bottom: 16px;
}

.test-container ul {
  list-style: none;
  padding: 0;
}

.test-container li {
  margin-bottom: 12px;
}

.test-container label {
  cursor: pointer;
}

.test-container .button-group {
  display: flex;
  justify-content: space-between;
  margin-top: 20px;
}

.test-container button {
  padding: 10px 20px;
}

/* 进度条样式 */
.progress-bar-container {
  width: 100%;
  background-color: #e9ecef;
  border-radius: 4px;
  margin-bottom: 20px;
  overflow: hidden;
}

.progress-bar {
  height: 20px;
  background-color: #007bff;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #fff;
  font-size: 12px;
  transition: width 0.3s ease;
}

/* 总结页面样式 */
.summary-container {
  max-width: 800px;
  margin: 40px auto;
  padding: 40px;
  background-color: #fff;
  border-radius: 8px;
}

.summary-container .personal-info p {
  margin: 8px 0;
}

.summary-container .results-chart {
  margin: 24px 0;
}

.summary-container .evaluation {
  margin-top: 24px;
}

.summary-container .evaluation p {
  margin: 12px 0;
}

/* 清除测试样式 */
.clearing-test-section {
  margin-top: 20px;
  padding: 10px;
  background-color: #f1f1f1;
  border-radius: 4px;
}

.clearing-test-section p {
  white-space: pre-wrap; /* 保证文本自动换行 */
  margin-bottom: 16px;
  font-size: 14px; /* 根据需要调整字体大小 */
  line-height: 1.6; /* 增加行高以提高可读性 */
}

================
File: src/utils/markdown.ts
================
// src/utils/markdown.ts
import { TestResult, PersonalInfo } from '../types';

export const generateMarkdown = (
  results: TestResult[],
  personalInfo: PersonalInfo
): string => {
  let totalScore = results.reduce((sum, result) => sum + result.score, 0);
  let markdown = `# 功能动作筛查 (FMS) 评估结果\n\n`;

  markdown += `**被测试者姓名**：${personalInfo.name}  \n`;
  markdown += `**测试时间**：${personalInfo.testDate}  \n`;
  markdown += `**优势手**：${personalInfo.dominantHand}  \n`;
  markdown += `**优势脚**：${personalInfo.dominantFoot}  \n`;
  markdown += `**测试者**：${personalInfo.tester}  \n`;
  markdown += `**总分**：${totalScore} / 21\n\n`;

  results.forEach((result) => {
    markdown += `## ${result.testName}\n`;
    markdown += `- 得分: ${result.score}\n`;
    if (result.clearingTest !== null) {
      markdown += `- 清除测试结果: ${result.clearingTest ? '通过（分数设为0）' : '未通过'}\n`;
    }
    markdown += '\n';
  });

  // 分析与建议部分
  markdown += `# 分析与建议\n\n`;
  if (totalScore < 14) {
    markdown += '- **总分低于14，存在较高的受伤风险，建议进行针对性的功能训练。**\n';
  } else {
    markdown += '- **总分高于14，受伤风险较低，请继续保持良好的运动状态。**\n';
  }

  results.forEach((result) => {
    if (result.score === 1) {
      markdown += `- **${result.testName}** 得分为1，建议加强该部位的功能训练。\n`;
    }
    if (result.score === 0) {
      markdown += `- **${result.testName}** 过程中有疼痛，建议咨询专业医生。\n`;
    }
  });

  return markdown;
};

================
File: src/App.tsx
================
// src/App.tsx
import React, { useState } from 'react';
import PersonalInfoForm from './components/PersonalInfoForm';
import Test from './components/Test';
import Summary from './components/Summary';
import ProgressBar from './components/ProgressBar';
import data from './data/fmsData';
import { TestResult, PersonalInfo } from './types';
import './styles/App.css';

const App: React.FC = () => {
  const [personalInfo, setPersonalInfo] = useState<PersonalInfo | null>(null);
  const [currentTestIndex, setCurrentTestIndex] = useState(0);
  const [results, setResults] = useState<TestResult[]>([]);

  const handlePersonalInfoSubmit = (info: PersonalInfo) => {
    setPersonalInfo(info);
  };

  const handleNext = (score: number, clearingTest: boolean | null) => {
    const testName = data.categories[currentTestIndex].test_name;
    // 如果选择了清除测试为“是”，则分数设为0
    const finalScore = clearingTest ? 0 : score;
    const newResult: TestResult = { testName, score: finalScore, clearingTest };
    const newResults = [...results];
    newResults[currentTestIndex] = newResult; // 覆盖当前测试结果
    setResults(newResults);
    if (currentTestIndex < data.categories.length - 1) {
      setCurrentTestIndex(currentTestIndex + 1);
    } else {
      // 所有测试完成
      setCurrentTestIndex(-1);
    }
  };

  const handleBack = () => {
    if (currentTestIndex > 0) {
      setCurrentTestIndex(currentTestIndex - 1);
    }
  };

  if (!personalInfo) {
    // 显示个人信息表单
    return <PersonalInfoForm onSubmit={handlePersonalInfoSubmit} />;
  }

  if (currentTestIndex === -1) {
    // 显示总结页面
    return <Summary results={results} personalInfo={personalInfo} />;
  }

  const currentTest = data.categories[currentTestIndex];
  const progress = ((currentTestIndex + 1) / data.categories.length) * 100;

  // 获取当前测试的已有结果（如果有）
  const existingResult = results[currentTestIndex] || null;

  return (
    <div className="app-container">
      <ProgressBar progress={progress} />
      {/* 添加 key 属性，确保每次测试切换时 Test 组件重新挂载 */}
      <Test
        key={currentTest.test_name}
        test={currentTest}
        onNext={handleNext}
        onBack={handleBack}
        existingResult={existingResult}
      />
    </div>
  );
};

export default App;

================
File: src/index.css
================
body {
  font-family: Arial, sans-serif;
  margin: 20px;
}

h1, h2, h3 {
  color: #333;
}

ul {
  list-style-type: none;
  padding: 0;
}

li {
  margin-bottom: 10px;
}

label {
  cursor: pointer;
}

button {
  margin-top: 20px;
  padding: 10px 20px;
}

================
File: src/main.tsx
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

================
File: src/types.ts
================
// src/types.ts
export interface ScoreCriteria {
  score: number;
  criteria: string;
}

export interface TestItem {
  test_name: string;
  scores: ScoreCriteria[];
  clearing_test?: string;
}

export interface FMSData {
  title: string;
  categories: TestItem[];
}

export interface TestResult {
  testName: string;
  score: number;
  clearingTest: boolean | null;
}

export interface PersonalInfo {
  name: string;
  testDate: string;
  dominantHand: string;
  dominantFoot: string;
  tester: string;
}

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "fms-app",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@types/markdown-it": "^12.2.3",
    "markdown-it": "^13.0.1",
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "react-markdown": "^8.0.3"
  },
  "devDependencies": {
    "@types/react": "^18.0.0",
    "@types/react-dom": "^18.0.0",
    "@vitejs/plugin-react": "^4.3.2",
    "typescript": "^4.6.3",
    "vite": "^5.4.9"
  }
}

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ESNext",
    "useDefineForClassFields": true,
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    "allowJs": false,
    "skipLibCheck": true,
    "esModuleInterop": false,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "module": "ESNext",
    "moduleResolution": "Node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": ["src"]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})

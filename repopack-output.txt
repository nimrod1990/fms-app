This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-27T08:49:07.019Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
public/
  vite.svg
src/
  assets/
    react.svg
  components/
    Modal.tsx
    PersonalInfoForm.tsx
    ProgressBar.tsx
    Summary.tsx
    Test.tsx
  data/
    fmsData.ts
  styles/
    App.css
  utils/
    markdown.ts
  App.tsx
  index.css
  main.tsx
  types.ts
  vite-env.d.ts
.gitignore
eslint.config.js
index.html
package.json
README.md
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: src/components/Modal.tsx
================
// src/components/Modal.tsx

import React, { useEffect } from 'react';
import ReactDOM from 'react-dom';

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  children: React.ReactNode;
}

const Modal: React.FC<ModalProps> = ({ isOpen, onClose, title, children }) => {
  // 处理 ESC 键关闭模态
  useEffect(() => {
    const handleEsc = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };
    if (isOpen) {
      document.addEventListener('keydown', handleEsc);
    }
    return () => {
      document.removeEventListener('keydown', handleEsc);
    };
  }, [isOpen, onClose]);

  if (!isOpen) return null;

  return ReactDOM.createPortal(
    <div
      className="modal-overlay"
      onClick={onClose}
      aria-modal="true"
      role="dialog"
      data-testid="modal-overlay"
    >
      <div
        className="modal-content"
        onClick={(e) => e.stopPropagation()}
        data-testid="modal-content"
      >
        <button
          className="modal-close-button"
          onClick={onClose}
          aria-label="关闭模态"
          data-testid="modal-close-button"
        >
          &times;
        </button>
        <h3>{title}</h3>
        <div className="modal-body">
          {children}
        </div>
      </div>
    </div>,
    document.body
  );
};

export default Modal;

================
File: src/components/PersonalInfoForm.tsx
================
// src/components/PersonalInfoForm.tsx
import React, { useState } from 'react';
import { PersonalInfo } from '../types';

interface PersonalInfoFormProps {
  onSubmit: (info: PersonalInfo) => void;
}

const PersonalInfoForm: React.FC<PersonalInfoFormProps> = ({ onSubmit }) => {
  // 获取今天的日期，格式为 YYYY-MM-DD
  const getTodayDate = (): string => {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const day = String(today.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  };

  const [name, setName] = useState('');
  const [testDate, setTestDate] = useState(getTodayDate());
  const [dominantHand, setDominantHand] = useState('右手');
  const [dominantFoot, setDominantFoot] = useState('右脚');
  const [tester, setTester] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (name && testDate && tester) {
      onSubmit({ name, testDate, dominantHand, dominantFoot, tester });
    } else {
      alert('请完整填写所有必填信息。');
    }
  };

  return (
    <form className="personal-info-form" onSubmit={handleSubmit}>
      <h1>功能动作筛查 (FMS)</h1>
      <div className="form-group">
        <label htmlFor="name">被测试者姓名：</label>
        <input
          id="name"
          type="text"
          value={name}
          onChange={(e) => setName(e.target.value)}
          required
          aria-required="true"
        />
      </div>
      <div className="form-group">
        <label htmlFor="testDate">测试时间：</label>
        <input
          id="testDate"
          type="date"
          value={testDate}
          onChange={(e) => setTestDate(e.target.value)}
          required
          aria-required="true"
        />
      </div>
      <div className="form-group">
        <label htmlFor="dominantHand">优势手：</label>
        <select
          id="dominantHand"
          value={dominantHand}
          onChange={(e) => setDominantHand(e.target.value)}
        >
          <option value="左手">左手</option>
          <option value="右手">右手</option>
        </select>
      </div>
      <div className="form-group">
        <label htmlFor="dominantFoot">优势脚：</label>
        <select
          id="dominantFoot"
          value={dominantFoot}
          onChange={(e) => setDominantFoot(e.target.value)}
        >
          <option value="左脚">左脚</option>
          <option value="右脚">右脚</option>
        </select>
      </div>
      <div className="form-group">
        <label htmlFor="tester">测试者：</label>
        <input
          id="tester"
          type="text"
          value={tester}
          onChange={(e) => setTester(e.target.value)}
          required
          aria-required="true"
        />
      </div>
      <button type="submit">开始测试</button>
    </form>
  );
};

export default PersonalInfoForm;

================
File: src/components/ProgressBar.tsx
================
// src/components/ProgressBar.tsx
import React from 'react';

interface ProgressBarProps {
  progress: number; // 进度，取值 0 - 100
}

const ProgressBar: React.FC<ProgressBarProps> = React.memo(({ progress }) => {
  return (
    <div
      className="progress-bar-container"
      role="progressbar"
      aria-valuenow={progress}
      aria-valuemin={0}
      aria-valuemax={100}
      aria-label="测试进度"
    >
      <div className="progress-bar" style={{ width: `${progress}%` }}>
        <span>{Math.round(progress)}%</span>
      </div>
    </div>
  );
});

export default ProgressBar;

================
File: src/components/Summary.tsx
================
// src/components/Summary.tsx
import React, { useState, useMemo } from 'react';
import { TestResult, PersonalInfo } from '../types';
import { generateMarkdown } from '../utils/markdown';
import Modal from './Modal'; // 导入 Modal 组件

interface SummaryProps {
  results: TestResult[];
  personalInfo: PersonalInfo;
  onRestart: () => void;
}

// 定义每个测试的详细评价信息
const evaluationMessages: { [key: string]: { [score: number]: string } } = {
  '深蹲 (Deep Squat)': {
    3: '表现良好，躯干与胫骨平行，膝盖与脚对齐，显示出良好的下肢灵活性和核心稳定性。',
    2: '脚跟抬高，动作与3分相同，但仍存在轻微的灵活性不足。',
    1: '脚跟抬高，动作存在重大功能障碍，建议进行髋关节和踝关节的灵活性训练。',
    0: '运动过程中有疼痛，建议咨询专业医生。',
  },
  '跨栏步 (Hurdle Step)': {
    3: '表现良好，髋、膝、踝对齐，腰椎活动最小或无活动，显示出良好的单腿稳定性和核心控制能力。',
    2: '保持平衡，但有代偿性运动，建议加强核心稳定性训练。',
    1: '脚接触栏杆或失去平衡，建议进行骨盆稳定性和髋关节灵活性的训练。',
    0: '运动过程中有疼痛，建议咨询专业医生。',
  },
  '直线弓步 (Inline Lunge)': {
    3: '表现良好，保持杠杆接触，无躯干运动，膝盖触碰脚跟后的板子，显示出良好的下肢力量和核心稳定性。',
    2: '有代偿性运动，但保持平衡，建议加强髋部和膝关节的稳定性训练。',
    1: '失去平衡或错位，建议进行下肢稳定性和躯干控制的训练。',
    0: '运动过程中有疼痛，建议咨询专业医生。',
  },
  '肩部灵活性 (Shoulder Mobility)': {
    3: '两拳之间的距离在一手长度内，肩部灵活性良好。',
    2: '两拳之间的距离在一手半长度内，肩部有轻微的灵活性不足。',
    1: '两拳之间的距离大于一手半长度，肩部灵活性不足，建议进行肩部灵活性训练。',
    0: '运动过程中有疼痛，建议咨询专业医生。',
  },
  '主动直腿抬高 (Active Straight Leg Raise)': {
    3: '踝关节位于大腿中部与髂前上棘（ASIS）之间，显示出良好的下肢灵活性和骨盆稳定性。',
    2: '踝关节位于大腿中部与膝关节线之间，显示出轻微的灵活性不足。',
    1: '踝关节位于膝关节线以下，建议进行下肢灵活性和骨盆稳定性的训练。',
    0: '运动过程中有疼痛，建议咨询专业医生。',
  },
  '躯干稳定性俯卧撑 (Trunk Stability Push-Up)': {
    3: '身体整体抬起，脊柱没有滞后，拇指与头顶（男性）或下巴（女性）对齐，显示出良好的核心稳定性。',
    2: '男性拇指与下巴对齐，女性拇指与锁骨对齐，核心稳定性一般。',
    1: '无法正确完成动作，建议进行核心稳定性训练。',
    0: '运动过程中有疼痛，建议咨询专业医生。',
  },
  '躯干旋转稳定性 (Rotary Stability)': {
    3: '正确完成单侧重复动作，保持平衡，显示出良好的核心稳定性和协调性。',
    2: '无法正确完成单侧动作，但保持平衡，建议加强核心控制能力。',
    1: '无法完成单侧动作，失去平衡，建议进行核心稳定性和协调性的训练。',
    0: '运动过程中有疼痛，建议咨询专业医生。',
  },
};

// 定义每个测试的详细信息
const testDetails: { [key: string]: React.ReactNode } = {
  '深蹲 (Deep Squat)': (
    <div>
      <p><strong>原理：</strong>深蹲是一项多关节复合动作，主要评估髋、膝和踝关节的活动度，同时检测核心稳定性、肩部灵活性和全身的对称性。</p>
      <p><strong>医学解释：</strong>深蹲测试揭示下肢关节（髋、膝、踝）的灵活性是否受限，以及脊柱的中立位稳定性。</p>
      <p><strong>解决方案：</strong>改善髋关节灵活性、踝关节活动度的改善、脊柱稳定性训练。</p>
      {/* 添加更多详细信息 */}
    </div>
  ),
  '跨栏步 (Hurdle Step)': (
    <div>
      <p><strong>原理：</strong>通过迈步跨越障碍来评估下肢的对称性、髋关节的活动度和核心稳定性。</p>
      <p><strong>医学解释：</strong>测试主要观察髋关节的屈曲能力、骨盆的稳定性及下肢肌肉的协调性。</p>
      <p><strong>解决方案：</strong>改善髋关节屈曲紧张、增加骨盆稳定性、改善核心控制能力。</p>
      {/* 添加更多详细信息 */}
    </div>
  ),
  // 为其他测试项添加详细信息
  '直线弓步 (Inline Lunge)': (
    <div>
      <p><strong>原理：</strong>通过弓步动作评估下肢的稳定性及髋、膝、踝的活动度和核心控制力。</p>
      <p><strong>医学解释：</strong>主要关注下肢与躯干之间的协调性，尤其是在髋和膝之间的力学传导。</p>
      <p><strong>解决方案：</strong>解决髋屈和膝关节的稳定性问题，控制膝盖和脚的对齐，躯干稳定性练习。</p>
      {/* 添加更多详细信息 */}
    </div>
  ),
  '肩部灵活性 (Shoulder Mobility)': (
    <div>
      <p><strong>原理：</strong>评估肩关节在内旋和外旋时的活动范围和对称性。肩部灵活性对于维持肩带的健康及减少上肢运动中的代偿至关重要，该测试能够帮助评估肩关节的运动范围和灵活度。</p>
      <p><strong>医学解释：</strong>肩关节灵活性测试揭示肩带、肩胛骨和上背部的肌肉之间的相互协调性。肩胛骨的不对称性、胸椎活动受限或肩部周围肌肉的紧张都会影响动作。如果在肩部灵活性测试中发现明显的限制，这可能导致运动中出现肩部代偿，增加损伤的风险，尤其是肩袖损伤的可能性。</p>
      <p><strong>解决方案：</strong>- **墙上滑行（Wall Slides）**：此练习有助于激活肩部的肌肉，促进肩胛骨的稳定性和肩部灵活性。站立在墙前，用前臂支撑墙面，将手臂滑向天花板的方向，保持肩膀稳定。
- **书本打开式旋转（Open Book Rotation）**：该练习能够帮助打开胸椎并改善肩关节的活动范围。躺在瑜伽垫上，一侧卧姿，双臂向前伸展，然后慢慢转动上身，向相反方向伸展手臂，感受胸部的扩展和肩部的灵活度提升。
- **肩关节外旋（External Rotation）**：肩关节外旋可以强化旋转肌群中的冈下肌，增加肩部的稳定性。使用弹力带进行肩关节的外旋练习，有助于增加肩部的活动范围并减少代偿性动作。
- **坐姿辅助外旋（Seated Assisted External Rotation）**：这种练习使用一根棍棒来帮助推动肩部运动，尤其适合肩部疼痛严重的人群，有助于缓解紧张并增加肩关节的活动度。</p>
      {/* 添加更多详细信息 */}
    </div>
  ),
  '主动直腿抬高 (Active Straight Leg Raise)': (
    <div>
      <p><strong>原理：</strong>通过弓步动作评估下肢的稳定性及髋、膝、踝的活动度和核心控制力。</p>
      <p><strong>医学解释：</strong>主要关注下肢与躯干之间的协调性，尤其是在髋和膝之间的力学传导。</p>
      <p><strong>解决方案：</strong>解决髋屈和膝关节的稳定性问题，控制膝盖和脚的对齐，躯干稳定性练习。</p>
      {/* 添加更多详细信息 */}
    </div>
  ),
  '躯干稳定性俯卧撑 (Trunk Stability Push-Up)': (
    <div>
      <p><strong>原理：</strong>通过弓步动作评估下肢的稳定性及髋、膝、踝的活动度和核心控制力。</p>
      <p><strong>医学解释：</strong>主要关注下肢与躯干之间的协调性，尤其是在髋和膝之间的力学传导。</p>
      <p><strong>解决方案：</strong>解决髋屈和膝关节的稳定性问题，控制膝盖和脚的对齐，躯干稳定性练习。</p>
      {/* 添加更多详细信息 */}
    </div>
  ),
  '旋转稳定性 (Rotary Stability)': (
    <div>
      <p><strong>原理：</strong>通过弓步动作评估下肢的稳定性及髋、膝、踝的活动度和核心控制力。</p>
      <p><strong>医学解释：</strong>主要关注下肢与躯干之间的协调性，尤其是在髋和膝之间的力学传导。</p>
      <p><strong>解决方案：</strong>解决髋屈和膝关节的稳定性问题，控制膝盖和脚的对齐，躯干稳定性练习。</p>
      {/* 添加更多详细信息 */}
    </div>
  ),
  
};

const Summary: React.FC<SummaryProps> = ({ results, personalInfo, onRestart }) => {
  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
  const [selectedTest, setSelectedTest] = useState<string>('');

  // 使用 useMemo 计算总分，避免不必要的重新计算
  const totalScore = useMemo(() => {
    return results.reduce((sum, result) => sum + result.score, 0);
  }, [results]);

  const handleExport = () => {
    const markdownContent = generateMarkdown(results, personalInfo);
    const blob = new Blob([markdownContent], { type: 'text/markdown;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'FMS评估结果.md';
    link.click();
  };

  const openModal = (testName: string) => {
    setSelectedTest(testName);
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setSelectedTest('');
  };

  return (
    <div className="summary-container">
      <h2>评估结果</h2>
      <div className="personal-info">
        <p>被测试者姓名：{personalInfo.name}</p>
        <p>测试时间：{personalInfo.testDate}</p>
        <p>优势手：{personalInfo.dominantHand}</p>
        <p>优势脚：{personalInfo.dominantFoot}</p>
        <p>测试者：{personalInfo.tester}</p>
        <p>总分：{totalScore} / 21</p>
      </div>
      <div className="results-chart">
        {/* 使用表格展示评估结果 */}
        <table className="results-table">
          <thead>
            <tr>
              <th>测试项目</th>
              <th>得分</th>
              <th>清除测试结果</th>
              <th>详细信息</th>
            </tr>
          </thead>
          <tbody>
            {results.map((result, index) => (
              <tr key={index}>
                <td>{result.testName}</td>
                <td>{result.score}</td>
                <td>
                  {result.clearingTest === true
                    ? '通过（得分设为0）'
                    : result.clearingTest === false
                    ? '未通过'
                    : '无'}
                </td>
                <td>
                  <button onClick={() => openModal(result.testName)}>详细信息</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      <div className="evaluation">
        <h3>测量结果的评价</h3>
        {/* 根据总分提供具体的评价 */}
        {totalScore < 14 ? (
          <p>您的总分低于14，存在较高的受伤风险，建议进行针对性的功能训练。</p>
        ) : (
          <p>您的总分高于14，受伤风险较低，请继续保持良好的运动状态。</p>
        )}
        {/* 对每个测试项进行详细评价 */}
        {results.map((result) => {
          const testName = result.testName;
          const score = result.score;
          const message = evaluationMessages[testName]?.[score];

          if (message) {
            return (
              <p key={testName}>
                <strong>{testName}</strong>：{message}
              </p>
            );
          }

          return null;
        })}
      </div>
      <div className="button-group">
        <button onClick={handleExport}>导出为 Markdown</button>
        <button onClick={onRestart}>重新开始</button>
      </div>

      {/* Modal 组件 */}
      <Modal isOpen={isModalOpen} onClose={closeModal} title={selectedTest}>
        {testDetails[selectedTest]}
      </Modal>
    </div>
  );
};

export default Summary;

================
File: src/components/Test.tsx
================
// src/components/Test.tsx

import React, { useState, useEffect, useCallback } from 'react';
import { TestItem, TestResult, ScoreCriteria, ClearingTest } from '../types';
import Modal from './Modal';

// 导入 Lucide React 图标
import { HelpCircle, Info } from 'lucide-react';

interface TestProps {
  test: TestItem;
  onNext: (score: number, clearingTest: boolean | null) => void;
  onBack?: () => void;
  existingResult?: TestResult | null;
}

const Test: React.FC<TestProps> = React.memo(({ test, onNext, onBack, existingResult }) => {
  // 选定分数的状态
  const [selectedScore, setSelectedScore] = useState<number | null>(
    existingResult
      ? test.clearing_test && existingResult.clearingTest
        ? 0
        : existingResult.score
      : null
  );

  // 清除测试结果的状态
  const [clearingTestResult, setClearingTestResult] = useState<boolean | null>(
    test.clearing_test ? (existingResult ? existingResult.clearingTest : null) : false
  );

  // 分数详情模态框的状态
  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState<boolean>(false);
  const [detailsModalContent, setDetailsModalContent] = useState<{
    title: string;
    details: string;
    images: string[];
  } | null>(null);

  // “方法”模态框的状态
  const [isHowToModalOpen, setIsHowToModalOpen] = useState<boolean>(false);

  // 清除测试详情模态框的状态
  const [isClearingTestModalOpen, setIsClearingTestModalOpen] = useState<boolean>(false);
  const [clearingTestModalContent, setClearingTestModalContent] = useState<{
    title: string;
    details: string;
    images: string[];
  } | null>(null);

  // 如果选择了清除测试，则清除选定的分数
  useEffect(() => {
    if (clearingTestResult) {
      setSelectedScore(null);
    }
  }, [clearingTestResult]);

  // 提交测试的处理函数
  const handleSubmit = useCallback(() => {
    if (
      (test.clearing_test && clearingTestResult !== null) ||
      !test.clearing_test
    ) {
      if (
        (selectedScore !== null && !clearingTestResult) ||
        (test.clearing_test && clearingTestResult === true)
      ) {
        const finalScore = clearingTestResult ? 0 : selectedScore!;
        onNext(finalScore, clearingTestResult);
      } else {
        alert('请完成所有选项');
      }
    } else {
      alert('请完成所有选项');
    }
  }, [test.clearing_test, clearingTestResult, selectedScore, onNext]);

  // 处理分数选择
  const handleScoreChange = useCallback((score: number) => {
    setSelectedScore(score);
  }, []);

  // 处理清除测试选择
  const handleClearingTestChange = useCallback((result: boolean) => {
    setClearingTestResult(result);
  }, []);

  // 打开分数详情模态框
  const openDetailsModal = useCallback((score: ScoreCriteria) => {
    setDetailsModalContent({
      title: `${test.test_name} - 得分 ${score.score}`,
      details: score.details,
      images: score.images,
    });
    setIsDetailsModalOpen(true);
  }, [test.test_name]);

  // 关闭分数详情模态框
  const closeDetailsModal = useCallback(() => {
    setIsDetailsModalOpen(false);
    setDetailsModalContent(null);
  }, []);

  // 打开“方法”模态框
  const openHowToModal = useCallback(() => {
    setIsHowToModalOpen(true);
  }, []);

  // 关闭“方法”模态框
  const closeHowToModal = useCallback(() => {
    setIsHowToModalOpen(false);
  }, []);

  // 打开清除测试模态框
  const openClearingTestModal = useCallback(() => {
    if (test.clearing_test) {
      setClearingTestModalContent({
        title: `清除测试 - ${test.test_name}`,
        details: test.clearing_test.details,
        images: test.clearing_test.images,
      });
      setIsClearingTestModalOpen(true);
    }
  }, [test.clearing_test, test.test_name]);

  // 关闭清除测试模态框
  const closeClearingTestModal = useCallback(() => {
    setIsClearingTestModalOpen(false);
    setClearingTestModalContent(null);
  }, []);

  return (
    <div className="test-container">
      {/* 标题部分，标题居中，“方法”按钮紧靠右侧 */}
      <div className="test-header">
        <h2 className="test-title">{test.test_name}</h2>
        <button
          type="button"
          onClick={openHowToModal}
          className="how-to-button"
          aria-label={`方法 ${test.test_name}`}
        >
          <HelpCircle size={16} />
        </button>
      </div>

      {/* “方法”模态框 */}
      {test.purpose && test.method && (
        <Modal
          isOpen={isHowToModalOpen}
          onClose={closeHowToModal}
          title={`方法 - ${test.test_name}`}
        >
          <h4>测试目的</h4>
          <p>{test.purpose}</p>
          <h4>测试方法</h4>
          <p>{test.method}</p>
        </Modal>
      )}

      {/* 评分标准列表 */}
      <h3>评分标准：</h3>
      <ul className="score-list">
        {test.scores.map((scoreItem) => (
          <li key={scoreItem.score} className="score-item">
            <label className="score-label">
              <input
                type="radio"
                name={`score-${test.test_name}`} // 确保每个测试的名称唯一
                value={scoreItem.score}
                onChange={() => handleScoreChange(scoreItem.score)}
                disabled={clearingTestResult === true} // 如果选择了清除测试，则禁用
                checked={selectedScore === scoreItem.score}
              />
              {`得分 ${scoreItem.score}: ${scoreItem.criteria}`}
            </label>
            {/* “讲解”按钮 */}
            <button
              type="button"
              onClick={() => openDetailsModal(scoreItem)}
              className="details-button"
              aria-label={`查看得分 ${scoreItem.score} 的详细信息`}
            >
              <Info size={16} />
            </button>
          </li>
        ))}
      </ul>

      {/* 清除测试部分 */}
      {test.clearing_test && (
        <div className="clearing-test-section">
          <h3>清除测试：</h3>
          <p><strong>目的：</strong>{test.clearing_test.purpose}</p>
          <p><strong>方法：</strong>{test.clearing_test.method}</p>
          <button
            type="button"
            onClick={openClearingTestModal}
            className="details-button"
            aria-label={`查看清除测试 ${test.test_name} 的详细信息`}
          >
            <Info size={16} />
          </button>
          <div className="clearing-test-options">
            <label>
              <input
                type="radio"
                name={`clearingTest-${test.test_name}`} // 确保每个测试的名称唯一
                value="yes"
                onChange={() => handleClearingTestChange(true)}
                checked={clearingTestResult === true}
              />
              是（此选择将自动将本项得分设为0）
            </label>
            <label>
              <input
                type="radio"
                name={`clearingTest-${test.test_name}`} // 确保每个测试的名称唯一
                value="no"
                onChange={() => handleClearingTestChange(false)}
                checked={clearingTestResult === false}
              />
              否
            </label>
          </div>
        </div>
      )}

      {/* 提交和返回按钮 */}
      <div className="button-group">
        {onBack && (
          <button type="button" onClick={onBack} className="back-button">
            返回上一页
          </button>
        )}
        <button type="button" onClick={handleSubmit} className="next-button">
          下一步
        </button>
      </div>

      {/* 分数详情模态框 */}
      {detailsModalContent && (
        <Modal
          isOpen={isDetailsModalOpen}
          onClose={closeDetailsModal}
          title={detailsModalContent.title}
        >
          <p>{detailsModalContent.details}</p>
          {/* 如果有图像，则渲染图像 */}
          {detailsModalContent.images && detailsModalContent.images.length > 0 && (
            <div className="modal-images">
              {detailsModalContent.images.map((imageUrl, index) => (
                <img
                  key={index}
                  src={imageUrl}
                  alt={`${detailsModalContent.title} 图片 ${index + 1}`}
                  className="modal-image"
                />
              ))}
            </div>
          )}
        </Modal>
      )}

      {/* 清除测试详情模态框 */}
      {clearingTestModalContent && (
        <Modal
          isOpen={isClearingTestModalOpen}
          onClose={closeClearingTestModal}
          title={clearingTestModalContent.title}
        >
          <p>{clearingTestModalContent.details}</p>
          {/* 如果有图像，则渲染图像 */}
          {clearingTestModalContent.images && clearingTestModalContent.images.length > 0 && (
            <div className="modal-images">
              {clearingTestModalContent.images.map((imageUrl, index) => (
                <img
                  key={index}
                  src={imageUrl}
                  alt={`${clearingTestModalContent.title} 图片 ${index + 1}`}
                  className="modal-image"
                />
              ))}
            </div>
          )}
        </Modal>
      )}
    </div>
  );
});

export default Test;

================
File: src/data/fmsData.ts
================
// src/data/fmsData.ts
import { FMSData } from '../types';

const data: FMSData = {
  title: '功能动作筛查 (FMS)',
  categories: [
    {
      test_name: '深蹲 (Deep Squat)',
      purpose: '评估下肢的灵活性和核心稳定性。',
      method: '双脚与肩同宽，手臂举过头顶，深蹲至最低点，保持躯干与胫骨平行。',
      scores: [
        {
          score: 3,
          criteria: 'a. 杆在双足上方平行或更后；b. 躯干与胫骨平行或与地面垂直；c. 下蹲保持大腿低于水平线；d. 保持膝与足2或3趾方向一致。',
          details: '表现良好，躯干与胫骨平行，膝盖与脚对齐，显示出良好的下肢灵活性和核心稳定性。',
          images: ['/images/DM_20241026073914_001.PNG', '/images/DM_20241026073914_002.PNG'],
        },
        {
          score: 2,
          criteria: 'a、b、c、d之一不能达标，但仍能完成动作，或在足跟下加踮木板的前提下能完成动作。',
          details: '脚跟抬高，动作与3分相同，但仍存在轻微的灵活性不足。',
          images: ['/images/DM_20241026073914_003.PNG', '/images/DM_20241026073914_004.PNG'],
        },
        {
          score: 1,
          criteria: 'a、b、c、d中2-4个不能达标，或在足跟下加踮木板的前提下也不能完成动作。',
          details: '脚跟抬高，动作存在重大功能障碍，建议进行髋关节和踝关节的灵活性训练。',
          images: ['/images/DM_20241026073914_005.PNG', '/images/DM_20241026073914_006.PNG'],
        },
        {
          score: 0,
          criteria: '测试过程中身体任何部位出现疼痛。',
          details: '运动过程中有疼痛，建议咨询专业医生。',
          images: [],
        },
      ],
    },
    {
      test_name: '跨栏步 (Hurdle Step)',
      purpose: '评估下肢的灵活性和核心稳定性。',
      method: '站立在木杆旁，迈出一步跨过栏杆，保持身体的平衡和稳定。',
      scores: [
        {
          score: 3,
          criteria: '髋、膝、踝在矢状面上呈一条直线；腰部没有明显的移动；木杆与栏架保持平行。',
          details: '表现良好，髋、膝、踝对齐，腰椎活动最小或无活动，显示出良好的单腿稳定性和核心控制能力。',
          images: ['/images/DM_20241026073914_007.PNG', '/images/DM_20241026073914_008.PNG'],
        },
        {
          score: 2,
          criteria: '髋、膝、踝在矢状面上不呈一条直线；腰部有移动；木杆与栏架不平行。',
          details: '保持平衡，但有代偿性运动，建议加强核心稳定性训练。',
          images: ['/images/DM_20241026073914_009.PNG', '/images/DM_20241026073914_010.PNG'],
        },
        {
          score: 1,
          criteria: '脚碰到栏板；身体失去平衡。',
          details: '脚接触栏杆或失去平衡，建议进行骨盆稳定性和髋关节灵活性的训练。',
          images: ['/images/DM_20241026073914_011.PNG', '/images/DM_20241026073914_012.PNG'],
        },
        {
          score: 0,
          criteria: '测试过程中身体任何部位出现疼痛。',
          details: '运动过程中有疼痛，建议咨询专业医生。',
          images: [],
        },
      ],
    },
    {
      test_name: '直线弓箭步 (Inline Lunge)',
      purpose: '评估下肢的灵活性和核心稳定性。',
      method: '站立在木杆旁，一脚前踏，保持双脚在同一矢状面上，进行弓箭步动作。',
      scores: [
        {
          score: 3,
          criteria: '木杆仍保持与头、腰椎或骶骨接触；躯干没有明显移动；木杆和双脚仍处于同一矢状面；膝盖接触木板。',
          details: '表现良好，保持杠杆接触，无躯干运动，膝盖触碰脚跟后的板子，显示出良好的下肢力量和核心稳定性。',
          images: ['/images/DM_20241026073914_013.PNG', '/images/DM_20241026073915_014.PNG'],
        },
        {
          score: 2,
          criteria: '木杆不能保持与头、腰椎或骶骨接触；躯干有移动；两脚没有处于同一矢状面；膝盖不能接触木板。',
          details: '有代偿性运动，但保持平衡，建议加强髋部和膝关节的稳定性训练。',
          images: ['/images/DM_20241026073915_015.PNG', '/images/DM_20241026073915_016.PNG'],
        },
        {
          score: 1,
          criteria: '身体失去平衡。',
          details: '失去平衡或错位，建议进行下肢稳定性和躯干控制的训练。',
          images: ['/images/DM_20241026073915_017.PNG', '/images/DM_20241026073915_018.PNG'],
        },
        {
          score: 0,
          criteria: '测试过程中身体任何部位出现疼痛。',
          details: '运动过程中有疼痛，建议咨询专业医生。',
          images: [],
        },
      ],
    },
    {
      test_name: '肩部灵活性 (Shoulder Mobility)',
      purpose: '评估肩部的灵活性及潜在的肩部冲击问题。',
      method: '运动员双手握住木杆，尝试在不移动身体的情况下尽可能向后移动木杆。',
      scores: [
        {
          score: 3,
          criteria: '两拳之间的距离在一手长度内。',
          details: '肩部灵活性良好。',
          images: ['/images/DM_20241026073915_019.PNG'],
        },
        {
          score: 2,
          criteria: '两拳之间的距离在一手半长度内。',
          details: '肩部有轻微的灵活性不足。',
          images: ['/images/DM_20241026073915_020.PNG'],
        },
        {
          score: 1,
          criteria: '两拳之间的距离大于一手半长度。',
          details: '肩部灵活性不足，建议进行肩部灵活性训练。',
          images: ['/images/DM_20241026073915_021.PNG'],
        },
        {
          score: 0,
          criteria: '测试过程中身体任何部位出现疼痛。',
          details: '运动过程中有疼痛，建议咨询专业医生。',
          images: [],
        },
      ],
      clearing_test: {
        purpose: '排除肩部冲击（Impingement）的问题，以确保肩部灵活性测试的准确性。',
        method: '运动员将手掌放在对侧肩上，保持手掌与肩的接触，尽可能高地上抬肘部。',
        criteria: '如果在执行清除测试时出现疼痛或无法完成动作，则得分为0分。',
        images: ['/images/DM_20241026073915_022.PNG'],
        details:
          '肩夹击测试是必需的，因为仅仅采用肩部灵活性测试本身，有时不能发现肩部的冲击。通过此测试可以更准确地评估肩部是否存在潜在的冲击问题，从而确保整体测试的有效性。',
      },
    },
    {
      test_name: '主动直腿抬高 (Active Straight Leg Raise)',
      purpose: '评估下肢的灵活性和骨盆的稳定性。',
      method: '运动员平躺，双腿伸直，主动抬起一条腿尽可能高，同时保持另一条腿平放不动。',
      scores: [
        {
          score: 3,
          criteria: '踝关节位于大腿中部与髂前上棘（ASIS）之间。',
          details: '良好的下肢灵活性和骨盆稳定性。',
          images: ['/images/DM_20241026073915_023.PNG'],
        },
        {
          score: 2,
          criteria: '踝关节位于大腿中部与膝关节线之间。',
          details: '轻微的灵活性不足。',
          images: ['/images/DM_20241026073915_024.PNG'],
        },
        {
          score: 1,
          criteria: '踝关节位于膝关节线以下。',
          details: '建议进行下肢灵活性和骨盆稳定性的训练。',
          images: ['/images/DM_20241026073915_025.PNG'],
        },
        {
          score: 0,
          criteria: '测试过程中身体任何部位出现疼痛。',
          details: '运动过程中有疼痛，建议咨询专业医生。',
          images: [],
        },
      ],
    },
    {
      test_name: '躯干稳定性俯卧撑 (Trunk Stability Push-Up)',
      purpose: '评估核心稳定性和上肢力量。',
      method: '运动员进入标准俯卧撑姿势，完成规定次数的俯卧撑动作。',
      scores: [
        {
          score: 3,
          criteria:
            '在规定姿势下能很好的完成动作1次：男运动员的拇指与前额在一条线上。女运动员拇指与下颌成一条线。',
          details: '良好的核心稳定性。',
          images: ['/images/DM_20241026073915_026.PNG','/images/DM_20241026073915_027.PNG'],
        },
        {
          score: 2,
          criteria:
            '在降低难度的姿势下能完成动作1次。男运动员的拇指与下颌在一条线上。女运动员拇指与锁骨成一条线。',
          details: '核心稳定性一般。',
          images: ['/images/DM_20241026073915_028.PNG'],
        },
        {
          score: 1,
          criteria: '在降低难度的姿势下也无法完成动作或者出现动作代偿。',
          details: '建议进行核心稳定性训练。',
          images: [ '/images/DM_20241026073915_029.PNG', '/images/DM_20241026073915_030.PNG'],
        },
        {
          score: 0,
          criteria: '测试过程中身体任何部位出现疼痛。',
          details: '运动过程中有疼痛，建议咨询专业医生。',
          images: [],
        },
      ],
      clearing_test: {
        purpose: '排除脊柱伸展相关的疼痛或功能障碍，确保躯干稳定性俯卧撑测试的准确性。',
        method:
          '从俯撑动作开始姿势撑起上体，使脊柱充分伸展，观察是否有疼痛或不适。',
        criteria: '如果在执行脊柱伸展清除测试时出现疼痛，则得分为0分。',
        images: ['/images/DM_20241026073915_031.PNG'],
        details:
          '脊柱伸展清除测试用于确保在进行躯干稳定性俯卧撑测试时，运动员的脊柱不会因测试动作而引发疼痛或加剧现有的脊柱问题。这有助于更准确地评估核心稳定性。',
      },
    },
    {
      test_name: '躯干旋转稳定性 (Rotary Stability)',
      purpose: '评估核心的旋转稳定性和协调性。',
      method: '运动员进入四点支撑姿势，交替抬起对侧的手和脚，保持躯干稳定。',
      scores: [
        {
          score: 3,
          criteria: '运动员进行重复动作时躯干与木板保持平行；肘和膝接触时同木板在同一线上。',
          details: '正确完成单侧重复动作，保持平衡，显示出良好的核心稳定性和协调性。',
          images: ['/images/DM_20241026073915_032.PNG', '/images/DM_20241026073915_033.PNG'],
        },
        {
          score: 2,
          criteria: '运动员能够以异侧对角的形式正确完成动作。',
          details: '无法正确完成单侧动作，但保持平衡，建议加强核心控制能力。',
          images: ['/images/DM_41026073915_034.PNG', '/images/DM_41026073915_035.PNG'],
        },
        {
          score: 1,
          criteria: '失去平衡或者不能正确完成动作。',
          details: '无法完成单侧动作，失去平衡，建议进行核心稳定性和协调性的训练。',
          images: ['/images/DM_41026073915_036.PNG', '/images/DM_41026073915_037.PNG'],
        },
        {
          score: 0,
          criteria: '测试过程中身体任何部位出现疼痛。',
          details: '运动过程中有疼痛，建议咨询专业医生。',
          images: [],
        },
      ],
      clearing_test: {
        purpose: '排除脊柱屈曲相关的疼痛或功能障碍，确保躯干旋转稳定性测试的准确性。',
        method:
          '从四点支撑姿势开始，然后后移上体，使臀部接触双脚的脚跟、胸部接触双腿的大腿。双手保持在身体前方，尽量向远处伸出。',
        criteria: '如果在执行脊柱屈曲清除测试时出现疼痛，则得分为0分。',
        images: ['/images/DM_20241026073915_038.PNG'],
        details:
          '脊柱屈曲清除测试用于确保在进行躯干旋转稳定性测试时，运动员的脊柱不会因测试动作而引发疼痛或加剧现有的脊柱问题。这有助于更准确地评估核心旋转稳定性。',
      },
    },
  ],
};

export default data;

================
File: src/styles/App.css
================
/* src/styles/App.css */

/* CSS Variables for consistent styling */
:root {
  --color-primary: #007bff;
  --color-primary-hover: #0056b3;
  --color-secondary: #17a2b8;
  --color-secondary-hover: #138496;
  --color-white: #ffffff;
  --color-light-gray: #f9f9f9;
  --color-dark-gray: #333333;
  --border-radius-small: 4px;
  --border-radius-medium: 8px;
  --spacing-xs: 4px;
  --spacing-sm: 8px;
  --spacing-md: 16px;
  --spacing-lg: 20px;
  --font-size-base: 14px;
  --font-size-medium: 16px;
  --transition-speed: 0.3s;
}

/* 通用样式 */
body {
  font-family: 'Helvetica Neue', Arial, sans-serif;
  margin: 0;
  padding: 0;
  color: #333;
  background-color: #f9f9f9;
}

h1,
h2,
h3 {
  font-weight: 600;
  color: #333;
}

a {
  color: #007bff;
  text-decoration: none;
}

ul {
  list-style-type: none;
  padding: 0;
}

li {
  margin-bottom: 10px;
}

label {
  cursor: pointer;
}

button {
  background-color: #007bff;
  color: #fff;
  border: none;
  padding: 12px 24px;
  margin: 16px 0;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  font-size: 1rem;
}

button:hover {
  background-color: #0056b3;
}

button:focus {
  outline: 2px solid var(--color-primary-hover);
  outline-offset: 2px;
}

input[type="radio"]:focus + label {
  outline: 2px solid var(--color-primary-hover);
  outline-offset: 2px;
}

/* 个人信息表单样式 */
.personal-info-form {
  max-width: 600px;
  margin: 40px auto;
  padding: 40px;
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.personal-info-form h1 {
  margin-bottom: 24px;
  text-align: center;
}

.form-group {
  margin-bottom: 16px;
}

.form-group label {
  display: block;
  margin-bottom: 8px;
  font-weight: 500;
}

.form-group input,
.form-group select {
  width: 100%;
  padding: 8px;
  box-sizing: border-box;
  border: 1px solid #ccc;
  border-radius: 4px;
}

/* 测试页面样式 */
.app-container {
  max-width: 800px;
  margin: 20px auto;
  padding: 0 20px;
}

.test-container {
  background-color: #fff;
  padding: 24px;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.test-container h2 {
  margin-bottom: 16px;
  text-align: center;
}

.test-container ul {
  list-style: none;
  padding: 0;
}

.test-container li {
  margin-bottom: 12px;
}

.test-container label {
  cursor: pointer;
}

.test-container .button-group {
  display: flex;
  justify-content: space-between;
  margin-top: 20px;
}

.test-container button {
  padding: 10px 20px;
  flex: 1;
  margin: 0 5px;
}

/* 进度条样式 */
.progress-bar-container {
  width: 100%;
  background-color: #e9ecef;
  border-radius: 4px;
  margin-bottom: 20px;
  overflow: hidden;
  height: 20px;
}

.progress-bar {
  height: 100%;
  background-color: #007bff;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #fff;
  font-size: 12px;
  transition: width 0.3s ease;
}

/* 总结页面样式 */
.summary-container {
  max-width: 800px;
  margin: 40px auto;
  padding: 40px;
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.summary-container .personal-info p {
  margin: 8px 0;
  font-size: 16px;
}

.summary-container .results-chart {
  margin: 24px 0;
}

.summary-container .results-table {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: 24px;
}

.summary-container .results-table th,
.summary-container .results-table td {
  border: 1px solid #ddd;
  padding: 12px 16px;
  text-align: left;
}

.summary-container .results-table th {
  background-color: #f2f2f2;
  font-weight: 600;
}

.summary-container .results-table tr:nth-child(even) {
  background-color: #f9f9f9;
}

.summary-container .evaluation {
  margin-top: 24px;
}

.summary-container .evaluation p {
  margin: 12px 0;
  font-size: 16px;
}

/* 按钮组样式 */
.button-group {
  display: flex;
  justify-content: space-between;
  margin-top: 20px;
}

.button-group button {
  padding: 10px 20px;
  flex: 1;
  margin: 0 5px;
}

/* Modal 组件样式 */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modal-content {
  background-color: #fff;
  padding: 24px;
  border-radius: 8px;
  position: relative;
  max-width: 600px;
  width: 90%;
  max-height: 80%;
  overflow-y: auto;
}

.modal-close-button {
  position: absolute;
  top: 12px;
  right: 16px;
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
}

.modal-body {
  margin-top: 16px;
}

.modal-body img {
  max-width: 100%;
  height: auto;
  margin-top: 16px;
  border-radius: 4px;
}

.modal-images {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  margin-top: 16px;
}

.modal-images img {
  max-width: 100%;
  height: auto;
  margin: 8px;
  border-radius: 4px;
}

@media (min-width: 600px) {
  .modal-images img {
    max-width: 48%;
  }
}

/* Test 组件样式 */
.test-container {
  padding: var(--spacing-lg);
  background-color: var(--color-light-gray);
  border-radius: var(--border-radius-medium);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  max-width: 800px;
  margin: 0 auto;
}

.test-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: var(--spacing-lg);
}

.test-title {
  margin: 0;
  font-size: 1.5rem;
  color: var(--color-dark-gray);
}

/* "方法"按钮样式 */
.how-to-button {
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: transparent;
  color: var(--color-primary);
  border: none;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  cursor: pointer;
  transition: background-color var(--transition-speed) ease, color var(--transition-speed) ease;
  margin-left: var(--spacing-sm);
}

.how-to-button svg {
  width: 24px;
  height: 24px;
}

.how-to-button:hover,
.how-to-button:focus {
  background-color: rgba(0, 123, 255, 0.1);
  outline: none;
}

/* “讲解”按钮样式 */
.details-button {
  background-color: transparent;
  color: var(--color-secondary);
  border: none;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  cursor: pointer;
  transition: background-color var(--transition-speed) ease, color var(--transition-speed) ease;
  margin-left: var(--spacing-sm);
}

.details-button svg {
  width: 24px;
  height: 24px;
}

.details-button:hover,
.details-button:focus {
  background-color: rgba(23, 162, 184, 0.1);
  outline: none;
}

/* 评分标准列表 */
.score-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

.score-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: var(--spacing-xs) 0;
  border-bottom: 1px solid #e0e0e0;
}

.score-item:last-child {
  border-bottom: none;
}

.score-label {
  flex: 1;
  font-size: var(--font-size-medium);
  color: var(--color-dark-gray);
}

.score-label input {
  margin-right: var(--spacing-sm);
}

/* 清除测试部分 */
.clearing-test-section {
  margin-top: var(--spacing-md);
  padding-top: var(--spacing-md);
  border-top: 1px solid #e0e0e0;
}

.clearing-test-section h3 {
  margin-bottom: var(--spacing-xs);
  font-size: 1.25rem;
  color: var(--color-dark-gray);
}

.clearing-test-options {
  display: flex;
  gap: var(--spacing-lg);
  margin-top: var(--spacing-xs);
}

.clearing-test-options label {
  display: flex;
  align-items: center;
  gap: var(--spacing-xs);
  font-size: var(--font-size-base);
  color: var(--color-dark-gray);
}

.clearing-test-options input {
  margin: 0;
}

/* 模态窗口中的图片 */
.modal-images {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  margin-top: var(--spacing-md);
}

.modal-images img {
  max-width: 100%;
  height: auto;
  margin: var(--spacing-xs);
  border-radius: var(--border-radius-small);
}

/* 响应式设计 */
@media (min-width: 600px) {
  .modal-images img {
    max-width: 48%;
  }
}

@media (max-width: 600px) {
  .button-group {
    flex-direction: column;
    gap: var(--spacing-sm);
  }

  .back-button,
  .next-button {
    flex: 1 1 100%;
    margin: 0;
  }

  .clearing-test-options {
    flex-direction: column;
    gap: var(--spacing-sm);
  }

  .score-item {
    flex-direction: column;
    align-items: flex-start;
  }

  .details-button {
    margin-left: 0;
    margin-top: var(--spacing-xs);
  }
}

/* 卡片式布局 */
.results-cards {
  display: none; /* 默认隐藏，只有在移动端显示 */
}

@media (max-width: 768px) {
  .results-table {
    display: none;
  }

  .results-cards {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .result-card {
    background-color: #f9f9f9;
    padding: 16px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .result-card h4 {
    margin-bottom: 8px;
  }

  .result-card p {
    margin: 4px 0;
    font-size: 0.95rem;
  }

  .result-card button {
    margin-top: 8px;
  }
}

================
File: src/utils/markdown.ts
================
// src/utils/markdown.ts
import { TestResult, PersonalInfo } from '../types';

export const generateMarkdown = (
  results: TestResult[],
  personalInfo: PersonalInfo
): string => {
  const totalScore = results.reduce((sum, result) => sum + result.score, 0);
  let markdown = `# 功能动作筛查 (FMS) 评估结果\n\n`;

  markdown += `**被测试者姓名**：${personalInfo.name}  \n`;
  markdown += `**测试时间**：${personalInfo.testDate}  \n`;
  markdown += `**优势手**：${personalInfo.dominantHand}  \n`;
  markdown += `**优势脚**：${personalInfo.dominantFoot}  \n`;
  markdown += `**测试者**：${personalInfo.tester}  \n`;
  markdown += `**总分**：${totalScore} / 21\n\n`;

  results.forEach((result) => {
    markdown += `## ${result.testName}\n`;
    markdown += `- 得分: ${result.score}\n`;
    if (result.clearingTest !== null) {
      markdown += `- 清除测试结果: ${result.clearingTest ? '通过（分数设为0）' : '未通过'}\n`;
    }
    markdown += '\n';
  });

  // 分析与建议部分
  markdown += `# 分析与建议\n\n`;
  if (totalScore < 14) {
    markdown += '- **总分低于14，存在较高的受伤风险，建议进行针对性的功能训练。**\n';
  } else {
    markdown += '- **总分高于14，受伤风险较低，请继续保持良好的运动状态。**\n';
  }

  results.forEach((result) => {
    if (result.score === 1) {
      markdown += `- **${result.testName}** 得分为1，建议加强该部位的功能训练。\n`;
    }
    if (result.score === 0) {
      markdown += `- **${result.testName}** 过程中有疼痛，建议咨询专业医生。\n`;
    }
  });

  return markdown;
};

================
File: src/App.tsx
================
// src/App.tsx
import React, { useState, Suspense, lazy } from 'react';
import ProgressBar from './components/ProgressBar';
import data from './data/fmsData';
import { TestResult, PersonalInfo } from './types';
import './styles/App.css';

// 使用 React.lazy 懒加载组件
const PersonalInfoForm = lazy(() => import('./components/PersonalInfoForm'));
const Test = lazy(() => import('./components/Test'));
const Summary = lazy(() => import('./components/Summary'));

const App: React.FC = () => {
  const [personalInfo, setPersonalInfo] = useState<PersonalInfo | null>(null);
  const [currentTestIndex, setCurrentTestIndex] = useState<number>(0);
  const [results, setResults] = useState<TestResult[]>([]);

  const handlePersonalInfoSubmit = (info: PersonalInfo) => {
    setPersonalInfo(info);
  };

  const handleNext = (score: number, clearingTest: boolean | null) => {
    const testName = data.categories[currentTestIndex].test_name;
    const finalScore = clearingTest ? 0 : score;
    const newResult: TestResult = { testName, score: finalScore, clearingTest };
    const updatedResults = [...results];
    updatedResults[currentTestIndex] = newResult; // 覆盖当前测试结果
    setResults(updatedResults);

    if (currentTestIndex < data.categories.length - 1) {
      setCurrentTestIndex(currentTestIndex + 1);
    } else {
      // 所有测试完成
      setCurrentTestIndex(-1);
    }
  };

  const handleBack = () => {
    if (currentTestIndex > 0) {
      setCurrentTestIndex(currentTestIndex - 1);
    }
  };

  const handleRestart = () => {
    setPersonalInfo(null);
    setCurrentTestIndex(0);
    setResults([]);
  };

  return (
    <Suspense fallback={<div>加载中...</div>}>
      {!personalInfo ? (
        <PersonalInfoForm onSubmit={handlePersonalInfoSubmit} />
      ) : currentTestIndex === -1 ? (
        <Summary results={results} personalInfo={personalInfo} onRestart={handleRestart} />
      ) : (
        <div className="app-container">
          <ProgressBar progress={((currentTestIndex + 1) / data.categories.length) * 100} />
          <Test
            key={data.categories[currentTestIndex].test_name}
            test={data.categories[currentTestIndex]}
            onNext={handleNext}
            onBack={handleBack}
            existingResult={results[currentTestIndex] || null}
          />
        </div>
      )}
    </Suspense>
  );
};

export default App;

================
File: src/index.css
================
/* src/index.css */

body {
  font-family: Arial, sans-serif;
  margin: 20px;
  background-color: #f9f9f9;
  color: #333;
}

h1,
h2,
h3 {
  color: #333;
}

ul {
  list-style-type: none;
  padding: 0;
}

li {
  margin-bottom: 10px;
}

label {
  cursor: pointer;
}

button {
  margin-top: 20px;
  padding: 10px 20px;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

button:hover {
  background-color: #0056b3;
}

================
File: src/main.tsx
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

================
File: src/types.ts
================
// src/types.ts

export interface ScoreCriteria {
  score: number;
  criteria: string;
  details: string;
  images: string[]; // 可选的图片数组
}

export interface ClearingTest {
  purpose: string;
  method: string;
  criteria: string;
  images: string[];
  details: string;
}

export interface TestItem {
  test_name: string;
  purpose: string; // 测试目的
  method: string;  // 测试方法
  scores: ScoreCriteria[];
  clearing_test?: ClearingTest;
}

export interface FMSData {
  title: string;
  categories: TestItem[];
}

export interface TestResult {
  testName: string;
  score: number;
  clearingTest: boolean | null;
}

export interface PersonalInfo {
  name: string;
  testDate: string;
  dominantHand: string;
  dominantFoot: string;
  tester: string;
}

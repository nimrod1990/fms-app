This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-16T11:37:00.650Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
public/
  vite.svg
src/
  assets/
    react.svg
  components/
    PersonalInfoForm.tsx
    ProgressBar.tsx
    Summary.tsx
    Test.tsx
  data/
    fmsData.ts
  styles/
    App.css
  utils/
    markdown.ts
  App.tsx
  index.css
  main.tsx
  types.ts
  vite-env.d.ts
.gitignore
eslint.config.js
index.html
package.json
README.md
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/PersonalInfoForm.tsx
================
import React, { useState } from 'react';
import { PersonalInfo } from '../types';

interface PersonalInfoFormProps {
  onSubmit: (info: PersonalInfo) => void;
}

const PersonalInfoForm: React.FC<PersonalInfoFormProps> = ({ onSubmit }) => {
  const [name, setName] = useState('');
  const [testDate, setTestDate] = useState('');
  const [dominantHand, setDominantHand] = useState('右手');
  const [dominantFoot, setDominantFoot] = useState('右脚');
  const [tester, setTester] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (name && testDate && tester) {
      onSubmit({ name, testDate, dominantHand, dominantFoot, tester });
    } else {
      alert('请完整填写所有必填信息。');
    }
  };

  return (
    <form className="personal-info-form" onSubmit={handleSubmit}>
      <h1>功能动作筛查 (FMS)</h1>
      <div className="form-group">
        <label>被测试者姓名：</label>
        <input type="text" value={name} onChange={(e) => setName(e.target.value)} required />
      </div>
      <div className="form-group">
        <label>测试时间：</label>
        <input type="date" value={testDate} onChange={(e) => setTestDate(e.target.value)} required />
      </div>
      <div className="form-group">
        <label>优势手：</label>
        <select value={dominantHand} onChange={(e) => setDominantHand(e.target.value)}>
          <option value="左手">左手</option>
          <option value="右手">右手</option>
        </select>
      </div>
      <div className="form-group">
        <label>优势脚：</label>
        <select value={dominantFoot} onChange={(e) => setDominantFoot(e.target.value)}>
          <option value="左脚">左脚</option>
          <option value="右脚">右脚</option>
        </select>
      </div>
      <div className="form-group">
        <label>测试者：</label>
        <input type="text" value={tester} onChange={(e) => setTester(e.target.value)} required />
      </div>
      <button type="submit">开始测试</button>
    </form>
  );
};

export default PersonalInfoForm;

================
File: src/components/ProgressBar.tsx
================
import React from 'react';

interface ProgressBarProps {
  progress: number; // 进度，取值 0 - 100
}

const ProgressBar: React.FC<ProgressBarProps> = ({ progress }) => {
  return (
    <div className="progress-bar-container">
      <div className="progress-bar" style={{ width: `${progress}%` }}>
        <span>{Math.round(progress)}%</span>
      </div>
    </div>
  );
};

export default ProgressBar;

================
File: src/components/Summary.tsx
================
import React from 'react';
import { TestResult, PersonalInfo } from '../types';
import { generateMarkdown } from '../utils/markdown';

interface SummaryProps {
  results: TestResult[];
  personalInfo: PersonalInfo;
}

const Summary: React.FC<SummaryProps> = ({ results, personalInfo }) => {
  const totalScore = results.reduce((sum, result) => sum + result.score, 0);

  const handleExport = () => {
    const markdownContent = generateMarkdown(results, personalInfo);
    const blob = new Blob([markdownContent], { type: 'text/markdown;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'FMS评估结果.md';
    link.click();
  };

  return (
    <div className="summary-container">
      <h2>评估结果</h2>
      <div className="personal-info">
        <p>被测试者姓名：{personalInfo.name}</p>
        <p>测试时间：{personalInfo.testDate}</p>
        <p>优势手：{personalInfo.dominantHand}</p>
        <p>优势脚：{personalInfo.dominantFoot}</p>
        <p>测试者：{personalInfo.tester}</p>
        <p>总分：{totalScore} / 21</p>
      </div>
      <div className="results-chart">
        {/* 可以在这里添加图表组件来可视化结果 */}
        {/* 由于不使用外部库，这里以简单的方式展示 */}
        <ul>
          {results.map((result, index) => (
            <li key={index}>
              <strong>{result.testName}</strong>: 得分 {result.score}
            </li>
          ))}
        </ul>
      </div>
      <div className="evaluation">
        <h3>测量结果的评价</h3>
        {/* 根据得分提供具体的评价 */}
        {totalScore < 14 ? (
          <p>您的总分低于14，存在较高的受伤风险，建议进行针对性的功能训练。</p>
        ) : (
          <p>您的总分高于14，受伤风险较低，请继续保持良好的运动状态。</p>
        )}
        {/* 对每个测试项进行评价 */}
        {results.map((result) => {
          if (result.score < 2) {
            return (
              <p key={result.testName}>
                在<strong>{result.testName}</strong>项目中得分较低，建议加强相关部位的功能训练。
              </p>
            );
          }
          return null;
        })}
      </div>
      <button onClick={handleExport}>导出为 Markdown</button>
    </div>
  );
};

export default Summary;

================
File: src/components/Test.tsx
================
import React, { useState } from 'react';
import { TestItem } from '../types';

interface TestProps {
  test: TestItem;
  onNext: (score: number, clearingTest: boolean | null) => void;
}

const Test: React.FC<TestProps> = ({ test, onNext }) => {
  const [selectedScore, setSelectedScore] = useState<number | null>(null);
  const [clearingTestResult, setClearingTestResult] = useState<boolean | null>(
    test.clearing_test ? null : false
  );

  const handleSubmit = () => {
    if (selectedScore !== null && (clearingTestResult !== null || !test.clearing_test)) {
      onNext(selectedScore, clearingTestResult);
    } else {
      alert('请完成所有选项');
    }
  };

  return (
    <div>
      <h2>{test.test_name}</h2>
      <h3>评分标准：</h3>
      <ul>
        {test.scores.map((scoreItem) => (
          <li key={scoreItem.score}>
            <label>
              <input
                type="radio"
                name="score"
                value={scoreItem.score}
                onChange={() => setSelectedScore(scoreItem.score)}
              />
              {`得分 ${scoreItem.score}: ${scoreItem.criteria}`}
            </label>
          </li>
        ))}
      </ul>
      {test.clearing_test && (
        <div>
          <h3>清除测试：</h3>
          <p>{test.clearing_test}</p>
          <label>
            <input
              type="radio"
              name="clearingTest"
              value="yes"
              onChange={() => setClearingTestResult(true)}
            />
            是
          </label>
          <label>
            <input
              type="radio"
              name="clearingTest"
              value="no"
              onChange={() => setClearingTestResult(false)}
            />
            否
          </label>
        </div>
      )}
      <button onClick={handleSubmit}>下一步</button>
    </div>
  );
};

export default Test;

================
File: src/data/fmsData.ts
================
import { FMSData } from '../types';

const data: FMSData = {
  title: '功能动作筛查 (FMS)',
  categories: [
    {
      test_name: '深蹲 (Deep Squat)',
      scores: [
        {
          score: 3,
          criteria: '躯干与胫骨平行，股骨低于水平线，膝盖与脚对齐，杠杆与脚对齐。'
        },
        {
          score: 2,
          criteria: '脚跟抬高，但动作与得分3相同。'
        },
        {
          score: 1,
          criteria: '脚跟抬高，动作存在重大功能障碍。'
        },
        {
          score: 0,
          criteria: '运动过程中有疼痛。'
        }
      ]
    },
    {
      test_name: '跨栏步 (Hurdle Step)',
      scores: [
        {
          score: 3,
          criteria: '髋、膝、踝对齐，腰椎活动最小或无活动，杠杆和栏杆保持平行。'
        },
        {
          score: 2,
          criteria: '保持平衡，但有代偿性运动。'
        },
        {
          score: 1,
          criteria: '脚接触栏杆或失去平衡。'
        },
        {
          score: 0,
          criteria: '运动过程中有疼痛。'
        }
      ]
    },
    {
      test_name: '直线弓步 (Inline Lunge)',
      scores: [
        {
          score: 3,
          criteria: '保持杠杆接触，无躯干运动，杠杆和脚在矢状面，膝盖触碰脚跟后的板子。'
        },
        {
          score: 2,
          criteria: '有代偿性运动，但保持平衡。'
        },
        {
          score: 1,
          criteria: '失去平衡或错位。'
        },
        {
          score: 0,
          criteria: '运动过程中有疼痛。'
        }
      ]
    },
    {
      test_name: '肩部灵活性 (Shoulder Mobility)',
      scores: [
        {
          score: 3,
          criteria: '两拳之间的距离在一手长度内。'
        },
        {
          score: 2,
          criteria: '两拳之间的距离在一手半长度内。'
        },
        {
          score: 1,
          criteria: '两拳之间的距离大于一手半长度。'
        },
        {
          score: 0,
          criteria: '运动过程中有疼痛。'
        }
      ],
      clearing_test: '需要进行肩部疼痛清除测试。'
    },
    {
      test_name: '主动直腿抬高 (Active Straight Leg Raise)',
      scores: [
        {
          score: 3,
          criteria: '踝关节位于大腿中部与髂前上棘 (ASIS) 之间。'
        },
        {
          score: 2,
          criteria: '踝关节位于大腿中部与膝关节线之间。'
        },
        {
          score: 1,
          criteria: '踝关节位于膝关节线以下。'
        },
        {
          score: 0,
          criteria: '运动过程中有疼痛。'
        }
      ]
    },
    {
      test_name: '躯干稳定性俯卧撑 (Trunk Stability Push-Up)',
      scores: [
        {
          score: 3,
          criteria: '身体作为一个整体抬起，脊柱没有滞后，拇指与头顶（男性）或下巴（女性）对齐。'
        },
        {
          score: 2,
          criteria: '男性：拇指与下巴对齐；女性：拇指与锁骨对齐。'
        },
        {
          score: 1,
          criteria: '无法正确完成动作。'
        },
        {
          score: 0,
          criteria: '运动过程中有疼痛。'
        }
      ],
      clearing_test: '需要进行脊柱伸展清除测试。'
    },
    {
      test_name: '旋转稳定性 (Rotary Stability)',
      scores: [
        {
          score: 3,
          criteria: '正确完成单侧重复动作，保持平衡。'
        },
        {
          score: 2,
          criteria: '无法正确完成单侧动作，但保持平衡。'
        },
        {
          score: 1,
          criteria: '无法完成单侧动作，失去平衡。'
        },
        {
          score: 0,
          criteria: '运动过程中有疼痛。'
        }
      ],
      clearing_test: '需要进行脊柱屈曲清除测试。'
    }
  ]
};

export default data;

================
File: src/styles/App.css
================
/* 通用样式 */
body {
  font-family: 'Helvetica Neue', Arial, sans-serif;
  margin: 0;
  padding: 0;
  color: #333;
  background-color: #f9f9f9;
}

h1, h2, h3 {
  font-weight: 600;
}

a {
  color: #007bff;
  text-decoration: none;
}

button {
  background-color: #007bff;
  color: #fff;
  border: none;
  padding: 12px 24px;
  margin: 16px 0;
  border-radius: 4px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}

/* 个人信息表单样式 */
.personal-info-form {
  max-width: 600px;
  margin: 40px auto;
  padding: 40px;
  background-color: #fff;
  border-radius: 8px;
}

.personal-info-form h1 {
  margin-bottom: 24px;
}

.form-group {
  margin-bottom: 16px;
}

.form-group label {
  display: block;
  margin-bottom: 8px;
}

.form-group input, .form-group select {
  width: 100%;
  padding: 8px;
  box-sizing: border-box;
}

/* 测试页面样式 */
.app-container {
  max-width: 800px;
  margin: 20px auto;
  padding: 0 20px;
}

.test-container {
  background-color: #fff;
  padding: 24px;
  border-radius: 8px;
}

.test-container h2 {
  margin-bottom: 16px;
}

.test-container ul {
  list-style: none;
  padding: 0;
}

.test-container li {
  margin-bottom: 12px;
}

.test-container label {
  cursor: pointer;
}

.test-container button {
  margin-top: 20px;
}

/* 进度条样式 */
.progress-bar-container {
  width: 100%;
  background-color: #e9ecef;
  border-radius: 4px;
  margin-bottom: 20px;
  overflow: hidden;
}

.progress-bar {
  height: 20px;
  background-color: #007bff;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #fff;
  font-size: 12px;
  transition: width 0.3s ease;
}

/* 总结页面样式 */
.summary-container {
  max-width: 800px;
  margin: 40px auto;
  padding: 40px;
  background-color: #fff;
  border-radius: 8px;
}

.summary-container .personal-info p {
  margin: 8px 0;
}

.summary-container .results-chart {
  margin: 24px 0;
}

.summary-container .evaluation {
  margin-top: 24px;
}

.summary-container .evaluation p {
  margin: 12px 0;
}

================
File: src/utils/markdown.ts
================
import { TestResult, PersonalInfo } from '../types';

export const generateMarkdown = (results: TestResult[], personalInfo: PersonalInfo): string => {
  let totalScore = results.reduce((sum, result) => sum + result.score, 0);
  let markdown = `# 功能动作筛查 (FMS) 评估结果\n\n`;

  markdown += `**被测试者姓名**：${personalInfo.name}  \n`;
  markdown += `**测试时间**：${personalInfo.testDate}  \n`;
  markdown += `**优势手**：${personalInfo.dominantHand}  \n`;
  markdown += `**优势脚**：${personalInfo.dominantFoot}  \n`;
  markdown += `**测试者**：${personalInfo.tester}  \n`;
  markdown += `**总分**：${totalScore} / 21\n\n`;

  results.forEach((result) => {
    markdown += `## ${result.testName}\n`;
    markdown += `- 得分: ${result.score}\n`;
    if (result.clearingTest !== null) {
      markdown += `- 清除测试结果: ${result.clearingTest ? '通过' : '未通过'}\n`;
    }
    markdown += '\n';
  });

  // 根据总分和具体分数提供分析和建议
  markdown += `# 分析与建议\n\n`;
  if (totalScore < 14) {
    markdown += '- **总分低于14，存在较高的受伤风险，建议进行针对性的功能训练。**\n';
  } else {
    markdown += '- **总分高于14，受伤风险较低，请继续保持良好的运动状态。**\n';
  }

  results.forEach((result) => {
    if (result.score === 1) {
      markdown += `- **${result.testName}** 得分为1，建议加强该部位的功能训练。\n`;
    }
    if (result.score === 0) {
      markdown += `- **${result.testName}** 过程中有疼痛，建议咨询专业医生。\n`;
    }
  });

  return markdown;
};

================
File: src/App.tsx
================
import React, { useState } from 'react';
import PersonalInfoForm from './components/PersonalInfoForm';
import Test from './components/Test';
import Summary from './components/Summary';
import ProgressBar from './components/ProgressBar';
import data from './data/fmsData';
import { TestResult, PersonalInfo } from './types';
import './styles/App.css';

const App: React.FC = () => {
  const [personalInfo, setPersonalInfo] = useState<PersonalInfo | null>(null);
  const [currentTestIndex, setCurrentTestIndex] = useState(0);
  const [results, setResults] = useState<TestResult[]>([]);

  const handlePersonalInfoSubmit = (info: PersonalInfo) => {
    setPersonalInfo(info);
  };

  const handleNext = (score: number, clearingTest: boolean | null) => {
    const testName = data.categories[currentTestIndex].test_name;
    setResults([...results, { testName, score, clearingTest }]);
    if (currentTestIndex < data.categories.length - 1) {
      setCurrentTestIndex(currentTestIndex + 1);
    } else {
      // 所有测试完成
      setCurrentTestIndex(-1);
    }
  };

  if (!personalInfo) {
    // 显示个人信息表单
    return <PersonalInfoForm onSubmit={handlePersonalInfoSubmit} />;
  }

  if (currentTestIndex === -1) {
    // 显示总结页面
    return <Summary results={results} personalInfo={personalInfo} />;
  }

  const currentTest = data.categories[currentTestIndex];
  const progress = ((currentTestIndex + 1) / data.categories.length) * 100;

  return (
    <div className="app-container">
      <ProgressBar progress={progress} />
      <Test test={currentTest} onNext={handleNext} />
    </div>
  );
};

export default App;

================
File: src/index.css
================
body {
  font-family: Arial, sans-serif;
  margin: 20px;
}

h1, h2, h3 {
  color: #333;
}

ul {
  list-style-type: none;
  padding: 0;
}

li {
  margin-bottom: 10px;
}

label {
  cursor: pointer;
}

button {
  margin-top: 20px;
  padding: 10px 20px;
}

================
File: src/main.tsx
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

================
File: src/types.ts
================
export interface ScoreCriteria {
  score: number;
  criteria: string;
}

export interface TestItem {
  test_name: string;
  scores: ScoreCriteria[];
  clearing_test?: string;
}

export interface FMSData {
  title: string;
  categories: TestItem[];
}

export interface TestResult {
  testName: string;
  score: number;
  clearingTest: boolean | null;
}

export interface PersonalInfo {
  name: string;
  testDate: string;
  dominantHand: string;
  dominantFoot: string;
  tester: string;
}

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "fms-app",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@types/markdown-it": "^12.2.3",
    "markdown-it": "^13.0.1",
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "react-markdown": "^8.0.3"
  },
  "devDependencies": {
    "@types/react": "^18.0.0",
    "@types/react-dom": "^18.0.0",
    "@vitejs/plugin-react": "^4.3.2",
    "typescript": "^4.6.3",
    "vite": "^5.4.9"
  }
}

================
File: README.md
================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ESNext",
    "useDefineForClassFields": true,
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    "allowJs": false,
    "skipLibCheck": true,
    "esModuleInterop": false,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "module": "ESNext",
    "moduleResolution": "Node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": ["src"]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})

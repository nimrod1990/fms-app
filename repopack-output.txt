This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-28T01:53:16.878Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
public/
  vite.svg
src/
  assets/
    react.svg
  components/
    Modal.tsx
    PersonalInfoForm.tsx
    ProgressBar.tsx
    Summary.tsx
    Test.test.tsx
    Test.tsx
  context/
    NotificationContext.tsx
  data/
    fmsData.ts
  styles/
    App.css
  utils/
    markdown.test.ts
    markdown.ts
  App.tsx
  main.tsx
  setupTests.ts
  types.ts
  vite-env.d.ts
.gitignore
eslint.config.js
index.html
package.json
README.md
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/Modal.tsx
================
// src/components/Modal.tsx

import React, { useEffect, useRef } from 'react';
import ReactDOM from 'react-dom';

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  children: React.ReactNode;
}

const Modal: React.FC<ModalProps> = ({ isOpen, onClose, title, children }) => {
  const modalRef = useRef<HTMLDivElement>(null);

  // 处理 ESC 键关闭模态
  useEffect(() => {
    const handleEsc = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };
    if (isOpen) {
      document.addEventListener('keydown', handleEsc);
      // 聚焦模态框
      modalRef.current?.focus();
    }
    return () => {
      document.removeEventListener('keydown', handleEsc);
    };
  }, [isOpen, onClose]);

  if (!isOpen) return null;

  return ReactDOM.createPortal(
    <div
      className="modal-overlay"
      onClick={onClose}
      aria-modal="true"
      role="dialog"
      data-testid="modal-overlay"
    >
      <div
        className="modal-content"
        onClick={(e: React.MouseEvent) => e.stopPropagation()}
        data-testid="modal-content"
        tabIndex={-1}
        ref={modalRef}
      >
        <button
          className="modal-close-button"
          onClick={onClose}
          aria-label="关闭模态"
          data-testid="modal-close-button"
        >
          &times;
        </button>
        <h3>{title}</h3>
        <div className="modal-body">
          {children}
        </div>
      </div>
    </div>,
    document.body
  );
};

export default Modal;

================
File: src/components/PersonalInfoForm.tsx
================
// src/components/PersonalInfoForm.tsx

import React, { useState } from 'react';
import { PersonalInfo, DominantHand, DominantFoot } from '../types';
import { useNotification } from '../context/NotificationContext'; // 导入 useNotification

interface PersonalInfoFormProps {
  onSubmit: (info: PersonalInfo) => void;
}

const PersonalInfoForm: React.FC<PersonalInfoFormProps> = ({ onSubmit }) => {
  // 获取今天的日期，格式为 YYYY-MM-DD
  const getTodayDate = (): string => {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const day = String(today.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  };

  const [name, setName] = useState<string>('');
  const [testDate, setTestDate] = useState<string>(getTodayDate());
  const [dominantHand, setDominantHand] = useState<DominantHand>(DominantHand.Right);
  const [dominantFoot, setDominantFoot] = useState<DominantFoot>(DominantFoot.Right);
  const [tester, setTester] = useState<string>('');

  const { notify } = useNotification(); // 使用通知

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (name && testDate && tester) {
      onSubmit({ name, testDate, dominantHand, dominantFoot, tester });
    } else {
      notify('请完整填写所有必填信息。', 'error');
    }
  };

  return (
    <form className="personal-info-form" onSubmit={handleSubmit}>
      <h2>红医师运动伤风险评估</h2>
      <div className="form-group">
        <label htmlFor="name">被测试者姓名：</label>
        <input
          id="name"
          type="text"
          value={name}
          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setName(e.target.value)}
          required
          aria-required="true"
        />
      </div>
      <div className="form-group">
        <label htmlFor="testDate">测试时间：</label>
        <input
          id="testDate"
          type="date"
          value={testDate}
          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setTestDate(e.target.value)}
          required
          aria-required="true"
        />
      </div>
      <div className="form-group">
        <label htmlFor="dominantHand">优势手：</label>
        <select
          id="dominantHand"
          value={dominantHand}
          onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setDominantHand(e.target.value as DominantHand)}
        >
          <option value={DominantHand.Left}>{DominantHand.Left}</option>
          <option value={DominantHand.Right}>{DominantHand.Right}</option>
        </select>
      </div>
      <div className="form-group">
        <label htmlFor="dominantFoot">优势脚：</label>
        <select
          id="dominantFoot"
          value={dominantFoot}
          onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setDominantFoot(e.target.value as DominantFoot)}
        >
          <option value={DominantFoot.Left}>{DominantFoot.Left}</option>
          <option value={DominantFoot.Right}>{DominantFoot.Right}</option>
        </select>
      </div>
      <div className="form-group">
        <label htmlFor="tester">测试者：</label>
        <input
          id="tester"
          type="text"
          value={tester}
          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setTester(e.target.value)}
          required
          aria-required="true"
        />
      </div>
      <button type="submit">开始测试</button>
    </form>
  );
};

export default PersonalInfoForm;

================
File: src/components/ProgressBar.tsx
================
// src/components/ProgressBar.tsx
import React from 'react';

interface ProgressBarProps {
  progress: number; // 进度，取值 0 - 100
}

const ProgressBar: React.FC<ProgressBarProps> = React.memo(({ progress }) => {
  // 确保 progress 在 0 - 100 之间
  const validProgress = Math.min(100, Math.max(0, progress));

  return (
    <div
      className="progress-bar-container"
      role="progressbar"
      aria-valuenow={validProgress}
      aria-valuemin={0}
      aria-valuemax={100}
      aria-label="测试进度"
    >
      <div className="progress-bar" style={{ width: `${validProgress}%` }}>
        <span>{Math.round(validProgress)}%</span>
      </div>
    </div>
  );
});

export default ProgressBar;

================
File: src/components/Summary.tsx
================
// src/components/Summary.tsx

import React, { useState, useMemo, useEffect } from 'react';
import { TestResult, PersonalInfo } from '../types';
import { generateMarkdown } from '../utils/markdown';
import Modal from './Modal'; // 导入 Modal 组件
import { Info } from 'lucide-react';
import { Tooltip } from 'react-tooltip'; // 正确导入 Tooltip
import 'react-tooltip/dist/react-tooltip.css'; // 导入样式

interface SummaryProps {
  results: TestResult[];
  personalInfo: PersonalInfo;
  onRestart: () => void;
}

// 定义每个测试的详细评价信息
const evaluationMessages: { [key: string]: { [score: number]: string } } = {
  '深蹲 (Deep Squat)': {
    3: '表现良好，躯干与胫骨平行，膝盖与脚对齐，显示出良好的下肢灵活性和核心稳定性。',
    2: '脚跟抬高，动作与3分相同，但仍存在轻微的灵活性不足。',
    1: '脚跟抬高，动作存在重大功能障碍，建议进行髋关节和踝关节的灵活性训练。',
    0: '运动过程中有疼痛，建议咨询专业医生。',
  },
  '跨栏步 (Hurdle Step)': {
    3: '表现良好，髋、膝、踝对齐，腰椎活动最小或无活动，显示出良好的单腿稳定性和核心控制能力。',
    2: '保持平衡，但有代偿性运动，建议加强核心稳定性训练。',
    1: '脚接触栏杆或失去平衡，建议进行骨盆稳定性和髋关节灵活性的训练。',
    0: '运动过程中有疼痛，建议咨询专业医生。',
  },
  '直线弓箭步 (Inline Lunge)': {
    3: '表现良好，保持杠杆接触，无躯干运动，膝盖触碰脚跟后的板子，显示出良好的下肢力量和核心稳定性。',
    2: '有代偿性运动，但保持平衡，建议加强髋部和膝关节的稳定性训练。',
    1: '失去平衡或错位，建议进行下肢稳定性和躯干控制的训练。',
    0: '运动过程中有疼痛，建议咨询专业医生。',
  },
  '肩部灵活性 (Shoulder Mobility)': {
    3: '肩部灵活性良好。',
    2: '肩部有轻微的灵活性不足。',
    1: '肩部灵活性不足，建议进行肩部灵活性训练。',
    0: '运动过程中有疼痛，建议咨询专业医生。',
  },
  '主动直腿抬高 (Active Straight Leg Raise)': {
    3: '良好的下肢灵活性和骨盆稳定性。',
    2: '轻微的灵活性不足。',
    1: '建议进行下肢灵活性和骨盆稳定性的训练。',
    0: '运动过程中有疼痛，建议咨询专业医生。',
  },
  '躯干稳定性俯卧撑 (Trunk Stability Push-Up)': {
    3: '良好的核心稳定性。',
    2: '核心稳定性一般。',
    1: '建议进行核心稳定性训练。',
    0: '运动过程中有疼痛，建议咨询专业医生。',
  },
  '躯干旋转稳定性 (Rotary Stability)': {
    3: '正确完成单侧重复动作，保持平衡，显示出良好的核心稳定性和协调性。',
    2: '无法正确完成单侧动作，但保持平衡，建议加强核心控制能力。',
    1: '无法完成单侧动作，失去平衡，建议进行核心稳定性和协调性的训练。',
    0: '运动过程中有疼痛，建议咨询专业医生。',
  },
};

const Summary: React.FC<SummaryProps> = ({ results, personalInfo, onRestart }) => {
  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
  const [selectedTest, setSelectedTest] = useState<string>('');
  const [isLoaded, setIsLoaded] = useState<boolean>(false); // 用于触发条形图动画

  // 使用 useMemo 计算总分，避免不必要的重新计算
  const totalScore = useMemo(() => {
    return results.reduce((sum, result) => sum + result.score, 0);
  }, [results]);

  const handleExport = () => {
    const markdownContent = generateMarkdown(results, personalInfo, evaluationMessages);
    const blob = new Blob([markdownContent], { type: 'text/markdown;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'FMS评估结果.md';
    link.click();
  };

  const openModal = (testName: string) => {
    setSelectedTest(testName);
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setSelectedTest('');
  };

  useEffect(() => {
    // 延迟触发动画效果
    setTimeout(() => {
      setIsLoaded(true);
    }, 100);
  }, []);

  return (
    <div className={`summary-container ${isLoaded ? 'loaded' : ''}`}>
      <h2>评估结果</h2>
      <div className="personal-info">
        <p>被测试者姓名：{personalInfo.name}</p>
        <p>测试时间：{personalInfo.testDate}</p>
        <p>优势手：{personalInfo.dominantHand}</p>
        <p>优势脚：{personalInfo.dominantFoot}</p>
        <p>测试者：{personalInfo.tester}</p>
        <p>总分：{totalScore} / 21</p>
      </div>

      {/* 结果可视化展示 */}
      <div className="score-visualization">
        <h3>测试分数可视化</h3>
        {results.map((result, index) => (
          <div key={index} className="score-bar">
            <div className="label">{result.testName}</div>
            <div className="bar-container">
              <div
                className="bar"
                style={{ width: `${(result.score / 3) * 100}%` }}
              ></div>
            </div>
            <div className="score">{result.score}/3</div>
          </div>
        ))}
      </div>

      {/* 移除详细信息的表格 */}
      <div className="results-chart">
        {/* 使用表格展示评估结果 */}
        <table className="results-table">
          <thead>
            <tr>
              <th>测试项目</th>
              <th>得分</th>
              <th>
                清除测试结果{' '}
                <Info
                  size={16}
                  data-tooltip-id="clearing-test-tooltip"
                  data-tooltip-content="阳性意味着该项分数自动设为0，阴性则保留原得分。"
                  style={{ cursor: 'pointer', verticalAlign: 'middle' }}
                />
                <Tooltip id="clearing-test-tooltip" place="top" />
              </th>
            </tr>
          </thead>
          <tbody>
            {results.map((result, index) => (
              <tr key={index}>
                <td>{result.testName}</td>
                <td>{result.score}</td>
                <td>
                  {result.clearingTest === true
                    ? '阳性（分数自动设为0）'
                    : result.clearingTest === false
                      ? '阴性'
                      : '无'}
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        {/* 卡片式展示评估结果，仅在移动端显示 */}
        <div className="results-cards">
          {results.map((result, index) => (
            <div key={index} className="result-card">
              <h4>{result.testName}</h4>
              <p><strong>得分：</strong>{result.score} / 3</p>
              <p><strong>清除测试结果：</strong>
                {result.clearingTest === true
                  ? '阳性（分数自动设为0）'
                  : result.clearingTest === false
                    ? '阴性'
                    : '无'}
              </p>
            </div>
          ))}
        </div>
      </div>

      <div className="evaluation">
        <h3>测量结果的评价</h3>
        {/* 根据总分提供总体评价 */}
        {totalScore < 14 ? (
          <p>您的总分低于14，存在较高的受伤风险，建议进行针对性的功能训练。</p>
        ) : (
          <p>您的总分高于14，受伤风险较低，请继续保持良好的运动状态。</p>
        )}

        {/* 对每个测试项进行详细评价 */}
        {results.map((result) => {
          const testName = result.testName;
          const score = result.score;
          const message = evaluationMessages[testName]?.[score];

          if (message) {
            return (
              <p key={testName}>
                <strong>{testName}</strong>：{message}
              </p>
            );
          }

          return null;
        })}
      </div>
      <div className="button-group">
        <button onClick={handleExport}>导出为 Markdown</button>
        <button onClick={onRestart}>重新开始</button>
      </div>

      {/* Modal 组件 */}
      <Modal isOpen={isModalOpen} onClose={closeModal} title={selectedTest}>
        {/* 由于不再需要详细信息，这里可以为空或提供简要信息 */}
        <p>详细信息已移除。</p>
      </Modal>
    </div >
  );
};

export default Summary;

================
File: src/components/Test.test.tsx
================
// src/components/Test.test.tsx

import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import Test from './Test';
import { TestItem, TestResult } from '../types';

// Mock Modal component to avoid rendering actual modal during tests
jest.mock('./Modal', () => ({ isOpen, onClose, title, children }: any) => (
  isOpen ? <div data-testid="modal">{title}{children}</div> : null
));

describe('Test Component', () => {
  const mockTest: TestItem = {
    test_name: '测试名称',
    purpose: '测试目的',
    method: '测试方法',
    scores: [
      { score: 3, criteria: '标准3', details: '详细3', images: [] },
      { score: 2, criteria: '标准2', details: '详细2', images: [] },
      { score: 1, criteria: '标准1', details: '详细1', images: [] },
      { score: 0, criteria: '标准0', details: '详细0', images: [] },
    ],
  };

  const onNextMock = jest.fn();
  const onBackMock = jest.fn();

  beforeEach(() => {
    onNextMock.mockClear();
    onBackMock.mockClear();
  });

  test('submits selected score without clearing test', () => {
    render(
      <Test
        test={mockTest}
        onNext={onNextMock}
        onBack={onBackMock}
        existingResult={null}
      />
    );

    // Select score 2
    const score2Radio = screen.getByLabelText(/得分 2: 标准2/i);
    fireEvent.click(score2Radio);

    // Click Next button
    const nextButton = screen.getByText(/下一步/i);
    fireEvent.click(nextButton);

    expect(onNextMock).toHaveBeenCalledWith(2, false);
  });

  test('submits with clearing test selected', () => {
    const testWithClearing: TestItem = {
      ...mockTest,
      clearing_test: {
        purpose: '清除测试目的',
        method: '清除测试方法',
        criteria: '清除测试标准',
        images: [],
        details: '清除测试详细',
      },
    };

    render(
      <Test
        test={testWithClearing}
        onNext={onNextMock}
        onBack={onBackMock}
        existingResult={null}
      />
    );

    // Select clearing test '是'
    const clearingYesRadio = screen.getByLabelText(/是（此选择将自动将本项得分设为0）/i);
    fireEvent.click(clearingYesRadio);

    // Click Next button
    const nextButton = screen.getByText(/下一步/i);
    fireEvent.click(nextButton);

    expect(onNextMock).toHaveBeenCalledWith(0, true);
  });

  test('alerts when required fields are missing', () => {
    window.alert = jest.fn();

    render(
      <Test
        test={mockTest}
        onNext={onNextMock}
        onBack={onBackMock}
        existingResult={null}
      />
    );

    // Do not select any score

    // Click Next button
    const nextButton = screen.getByText(/下一步/i);
    fireEvent.click(nextButton);

    expect(window.alert).toHaveBeenCalledWith('请完成所有选项。');
    expect(onNextMock).not.toHaveBeenCalled();
  });

  test('alerts when clearing test is not properly handled', () => {
    window.alert = jest.fn();

    const testWithClearing: TestItem = {
      ...mockTest,
      clearing_test: {
        purpose: '清除测试目的',
        method: '清除测试方法',
        criteria: '清除测试标准',
        images: [],
        details: '清除测试详细',
      },
    };

    render(
      <Test
        test={testWithClearing}
        onNext={onNextMock}
        onBack={onBackMock}
        existingResult={null}
      />
    );

    // Select clearing test '是'
    const clearingYesRadio = screen.getByLabelText(/是（此选择将自动将本项得分设为0）/i);
    fireEvent.click(clearingYesRadio);

    // Click Next button
    const nextButton = screen.getByText(/下一步/i);
    fireEvent.click(nextButton);

    expect(onNextMock).toHaveBeenCalledWith(0, true);

    // Alternatively, if selecting '否' but not selecting a score, expect alert
    const clearingNoRadio = screen.getByLabelText(/否/i);
    fireEvent.click(clearingNoRadio);

    // Do not select any score

    // Click Next button
    fireEvent.click(nextButton);

    expect(window.alert).toHaveBeenCalledWith('请完成所有选项。');
    expect(onNextMock).toHaveBeenCalledTimes(1); // Only the first call
  });

  test('calls onBack when Back button is clicked', () => {
    render(
      <Test
        test={mockTest}
        onNext={onNextMock}
        onBack={onBackMock}
        existingResult={null}
      />
    );

    const backButton = screen.getByText(/返回上一页/i);
    fireEvent.click(backButton);

    expect(onBackMock).toHaveBeenCalled();
  });
});

================
File: src/components/Test.tsx
================
// src/components/Test.tsx

import React, { useState, useEffect, useCallback } from 'react';
import { TestItem, TestResult, ScoreCriteria } from '../types';
import Modal from './Modal';
import { HelpCircle, Info } from 'lucide-react';
import { useNotification } from '../context/NotificationContext'; // 正确导入 useNotification

interface TestProps {
  test: TestItem;
  onNext: (score: number, clearingTest: boolean | null) => void;
  onBack?: () => void;
  existingResult?: TestResult | null;
  isLastTest: boolean; // 新增 prop
}

const Test: React.FC<TestProps> = React.memo(({ test, onNext, onBack, existingResult, isLastTest }) => {
  // 选定分数的状态
  const [selectedScore, setSelectedScore] = useState<number | null>(
    existingResult
      ? test.clearing_test && existingResult.clearingTest
        ? 0
        : existingResult.score
      : null
  );

  // 清除测试结果的状态
  const [clearingTestResult, setClearingTestResult] = useState<boolean | null>(
    test.clearing_test ? (existingResult ? existingResult.clearingTest : false) : false
  );

  // 分数详情模态框的状态
  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState<boolean>(false);
  const [detailsModalContent, setDetailsModalContent] = useState<{
    title: string;
    details: string;
    images: string[];
  } | null>(null);

  // “方法”模态框的状态
  const [isHowToModalOpen, setIsHowToModalOpen] = useState<boolean>(false);

  // 清除测试详情模态框的状态
  const [isClearingTestModalOpen, setIsClearingTestModalOpen] = useState<boolean>(false);
  const [clearingTestModalContent, setClearingTestModalContent] = useState<{
    title: string;
    details: string;
    images: string[];
  } | null>(null);

  const { notify } = useNotification(); // 使用通知

  // 如果选择了清除测试，则清除选定的分数
  useEffect(() => {
    if (clearingTestResult) {
      setSelectedScore(null);
    }
  }, [clearingTestResult]);

  // 提交测试的处理函数
  const handleSubmit = useCallback(() => {
    if (
      (test.clearing_test && clearingTestResult !== null) ||
      !test.clearing_test
    ) {
      if (
        (selectedScore !== null && !clearingTestResult) ||
        (test.clearing_test && clearingTestResult === true)
      ) {
        const finalScore = clearingTestResult ? 0 : selectedScore!;
        onNext(finalScore, clearingTestResult);

        if (isLastTest) {
          notify('评测已完成', 'success'); // 触发通知
        }
      } else {
        notify('请完成所有选项。', 'error');
      }
    } else {
      notify('请完成所有选项。', 'error');
    }
  }, [test.clearing_test, clearingTestResult, selectedScore, onNext, notify, isLastTest]);

  // 处理分数选择
  const handleScoreChange = useCallback((score: number) => {
    setSelectedScore(score);
    // 不再需要清除 errorMessage
  }, []);

  // 处理清除测试选择
  const handleClearingTestChange = useCallback((result: boolean) => {
    setClearingTestResult(result);
    // 不再需要清除 errorMessage
  }, []);

  // 打开分数详情模态框
  const openDetailsModal = useCallback((scoreItem: ScoreCriteria) => {
    setDetailsModalContent({
      title: `${test.test_name} - 得分 ${scoreItem.score}`,
      details: scoreItem.details,
      images: scoreItem.images,
    });
    setIsDetailsModalOpen(true);
  }, [test.test_name]);

  // 关闭分数详情模态框
  const closeDetailsModal = useCallback(() => {
    setIsDetailsModalOpen(false);
    setDetailsModalContent(null);
  }, []);

  // 打开“方法”模态框
  const openHowToModal = useCallback(() => {
    setIsHowToModalOpen(true);
  }, []);

  // 关闭“方法”模态框
  const closeHowToModal = useCallback(() => {
    setIsHowToModalOpen(false);
  }, []);

  // 打开清除测试模态框
  const openClearingTestModal = useCallback(() => {
    if (test.clearing_test) {
      setClearingTestModalContent({
        title: `清除测试 - ${test.test_name}`,
        details: test.clearing_test.details,
        images: test.clearing_test.images,
      });
      setIsClearingTestModalOpen(true);
    }
  }, [test.clearing_test, test.test_name]);

  // 关闭清除测试模态框
  const closeClearingTestModal = useCallback(() => {
    setIsClearingTestModalOpen(false);
    setClearingTestModalContent(null);
  }, []);

  return (
    <div className="test-container">
      {/* 标题部分，标题居中，“方法”按钮紧靠右侧 */}
      <div className="test-header">
        <h2 className="test-title">{test.test_name}</h2>
        <button
          type="button"
          onClick={openHowToModal}
          className="how-to-button"
          aria-label={`方法 ${test.test_name}`}
        >
          <HelpCircle size={16} />
        </button>
      </div>

      {/* “方法”模态框 */}
      {test.purpose && test.method && (
        <Modal
          isOpen={isHowToModalOpen}
          onClose={closeHowToModal}
          title={`方法 - ${test.test_name}`}
        >
          <h4>测试目的</h4>
          <p>{test.purpose}</p>
          <h4>测试方法</h4>
          <p>{test.method}</p>
        </Modal>
      )}

      {/* 评分标准列表 */}
      <h3>评分标准：</h3>
      <ul className="score-list">
        {test.scores.map((scoreItem: ScoreCriteria) => (
          <li key={scoreItem.score} className="score-item">
            <label className="score-label">
              <input
                type="radio"
                name={`score-${test.test_name}`} // 确保每个测试的名称唯一
                value={scoreItem.score}
                onChange={() => handleScoreChange(scoreItem.score)}
                disabled={clearingTestResult === true} // 如果选择了清除测试，则禁用
                checked={selectedScore === scoreItem.score}
              />
              {`得分 ${scoreItem.score}: ${scoreItem.criteria}`}
            </label>
            {/* “讲解”按钮 */}
            <button
              type="button"
              onClick={() => openDetailsModal(scoreItem)}
              className="details-button"
              aria-label={`查看得分 ${scoreItem.score} 的详细信息`}
            >
              <Info size={16} />
            </button>
          </li>
        ))}
      </ul>

      {/* 清除测试部分 */}
      {test.clearing_test && (
        <div className="clearing-test-section">
          <div className="clearing-test-header">
            <h3>清除测试：</h3>
            <button
              type="button"
              onClick={openClearingTestModal}
              className="details-button"
              aria-label={`查看清除测试 ${test.test_name} 的详细信息`}
            >
              <Info size={16} />
            </button>
          </div>
          <p><strong>目的：</strong>{test.clearing_test.purpose}</p>
          <p><strong>方法：</strong>{test.clearing_test.method}</p>
          <p><strong>判断：</strong>{test.clearing_test.criteria}</p>
          <div className="clearing-test-options">
            <label>
              <input
                type="radio"
                name={`clearingTest-${test.test_name}`} // 确保每个测试的名称唯一
                value="yes"
                onChange={() => handleClearingTestChange(true)}
                checked={clearingTestResult === true}
              />
              是（此选择将自动将本项得分设为0）
            </label>
            <label>
              <input
                type="radio"
                name={`clearingTest-${test.test_name}`} // 确保每个测试的名称唯一
                value="no"
                onChange={() => handleClearingTestChange(false)}
                checked={clearingTestResult === false}
              />
              否
            </label>
          </div>
        </div>
      )}

      {/* 提交和返回按钮 */}
      <div className="button-group">
        {onBack && (
          <button type="button" onClick={onBack} className="back-button">
            返回上一页
          </button>
        )}
        <button type="button" onClick={handleSubmit} className="next-button">
          {isLastTest ? '提交结果' : '下一步'}
        </button>
      </div>

      {/* 分数详情模态框 */}
      {detailsModalContent && (
        <Modal
          isOpen={isDetailsModalOpen}
          onClose={closeDetailsModal}
          title={detailsModalContent.title}
        >
          <p>{detailsModalContent.details}</p>
          {/* 如果有图像，则渲染图像 */}
          {detailsModalContent.images && detailsModalContent.images.length > 0 && (
            <div className="modal-images">
              {detailsModalContent.images.map((imageUrl: string, index: number) => (
                <img
                  key={index}
                  src={imageUrl}
                  alt={`${detailsModalContent.title} 图片 ${index + 1}`}
                  className="modal-image"
                />
              ))}
            </div>
          )}
        </Modal>
      )}

      {/* 清除测试详情模态框 */}
      {clearingTestModalContent && (
        <Modal
          isOpen={isClearingTestModalOpen}
          onClose={closeClearingTestModal}
          title={clearingTestModalContent.title}
        >
          <p>{clearingTestModalContent.details}</p>
          {/* 如果有图像，则渲染图像 */}
          {clearingTestModalContent.images && clearingTestModalContent.images.length > 0 && (
            <div className="modal-images">
              {clearingTestModalContent.images.map((imageUrl: string, index: number) => (
                <img
                  key={index}
                  src={imageUrl}
                  alt={`${clearingTestModalContent.title} 图片 ${index + 1}`}
                  className="modal-image"
                />
              ))}
            </div>
          )}
        </Modal>
      )}
    </div>
  );
});

// 导出 handleSubmit 函数以便于测试（如果需要）
export { Test };
export default Test;

================
File: src/context/NotificationContext.tsx
================
// src/context/NotificationContext.tsx

import React, { createContext, useContext, useState, ReactNode } from 'react';

interface NotificationContextType {
  notify: (message: string, type?: 'error' | 'success' | 'info') => void;
}

const NotificationContext = createContext<NotificationContextType | undefined>(undefined);

export const useNotification = (): NotificationContextType => {
  const context = useContext(NotificationContext);
  if (!context) {
    throw new Error('useNotification must be used within a NotificationProvider');
  }
  return context;
};

interface NotificationProviderProps {
  children: ReactNode;
}

export const NotificationProvider: React.FC<NotificationProviderProps> = ({ children }) => {
  const [notification, setNotification] = useState<{ message: string; type: 'error' | 'success' | 'info' } | null>(null);

  const notify = (message: string, type: 'error' | 'success' | 'info' = 'info') => {
    setNotification({ message, type });
    setTimeout(() => setNotification(null), 3000); // 自动隐藏通知
  };

  return (
    <NotificationContext.Provider value={{ notify }}>
      {children}
      {notification && (
        <div className={`notification ${notification.type}`}>
          {notification.message}
        </div>
      )}
    </NotificationContext.Provider>
  );
};

================
File: src/data/fmsData.ts
================
// src/data/fmsData.ts
import { FMSData } from '../types';

const data: FMSData = {
  title: ' (FMS)',
  categories: [
    {
      test_name: '深蹲 (Deep Squat)',
      purpose: '评估下肢的灵活性和核心稳定性。',
      method: '双脚与肩同宽，手臂举过头顶，深蹲至最低点，保持躯干与胫骨平行。',
      scores: [
        {
          score: 3,
          criteria: 'a. 杆在双足上方平行或更后；b. 躯干与胫骨平行或与地面垂直；c. 下蹲保持大腿低于水平线；d. 保持膝与足2或3趾方向一致。',
          details: '表现良好，躯干与胫骨平行，膝盖与脚对齐，显示出良好的下肢灵活性和核心稳定性。',
          images: ['/images/DM_20241026073914_001.PNG', '/images/DM_20241026073914_002.PNG'],
        },
        {
          score: 2,
          criteria: 'a、b、c、d之一不能达标，但仍能完成动作，或在足跟下加踮木板的前提下能完成动作。',
          details: '脚跟抬高，动作与3分相同，但仍存在轻微的灵活性不足。',
          images: ['/images/DM_20241026073914_003.PNG', '/images/DM_20241026073914_004.PNG'],
        },
        {
          score: 1,
          criteria: 'a、b、c、d中2-4个不能达标，或在足跟下加踮木板的前提下也不能完成动作。',
          details: '脚跟抬高，动作存在重大功能障碍，建议进行髋关节和踝关节的灵活性训练。',
          images: ['/images/DM_20241026073914_005.PNG', '/images/DM_20241026073914_006.PNG'],
        },
        {
          score: 0,
          criteria: '测试过程中身体任何部位出现疼痛。',
          details: '运动过程中有疼痛，建议咨询专业医生。',
          images: [],
        },
      ],
    },
    {
      test_name: '跨栏步 (Hurdle Step)',
      purpose: '评估下肢的灵活性和核心稳定性。',
      method: '站立在木杆旁，迈出一步跨过栏杆，保持身体的平衡和稳定。',
      scores: [
        {
          score: 3,
          criteria: '髋、膝、踝在矢状面上呈一条直线；腰部没有明显的移动；木杆与栏架保持平行。',
          details: '表现良好，髋、膝、踝对齐，腰椎活动最小或无活动，显示出良好的单腿稳定性和核心控制能力。',
          images: ['/images/DM_20241026073914_007.PNG', '/images/DM_20241026073914_008.PNG'],
        },
        {
          score: 2,
          criteria: '髋、膝、踝在矢状面上不呈一条直线；腰部有移动；木杆与栏架不平行。',
          details: '保持平衡，但有代偿性运动，建议加强核心稳定性训练。',
          images: ['/images/DM_20241026073914_009.PNG', '/images/DM_20241026073914_010.PNG'],
        },
        {
          score: 1,
          criteria: '脚碰到栏板；身体失去平衡。',
          details: '脚接触栏杆或失去平衡，建议进行骨盆稳定性和髋关节灵活性的训练。',
          images: ['/images/DM_20241026073914_011.PNG', '/images/DM_20241026073914_012.PNG'],
        },
        {
          score: 0,
          criteria: '测试过程中身体任何部位出现疼痛。',
          details: '运动过程中有疼痛，建议咨询专业医生。',
          images: [],
        },
      ],
    },
    {
      test_name: '直线弓箭步 (Inline Lunge)',
      purpose: '评估下肢的灵活性和核心稳定性。',
      method: '站立在木杆旁，一脚前踏，保持双脚在同一矢状面上，进行弓箭步动作。',
      scores: [
        {
          score: 3,
          criteria: '木杆仍保持与头、腰椎或骶骨接触；躯干没有明显移动；木杆和双脚仍处于同一矢状面；膝盖接触木板。',
          details: '表现良好，保持杠杆接触，无躯干运动，膝盖触碰脚跟后的板子，显示出良好的下肢力量和核心稳定性。',
          images: ['/images/DM_20241026073914_013.PNG', '/images/DM_20241026073915_014.PNG'],
        },
        {
          score: 2,
          criteria: '木杆不能保持与头、腰椎或骶骨接触；躯干有移动；两脚没有处于同一矢状面；膝盖不能接触木板。',
          details: '有代偿性运动，但保持平衡，建议加强髋部和膝关节的稳定性训练。',
          images: ['/images/DM_20241026073915_015.PNG', '/images/DM_20241026073915_016.PNG'],
        },
        {
          score: 1,
          criteria: '身体失去平衡。',
          details: '失去平衡或错位，建议进行下肢稳定性和躯干控制的训练。',
          images: ['/images/DM_41026073915_017.PNG', '/images/DM_41026073915_018.PNG'],
        },
        {
          score: 0,
          criteria: '测试过程中身体任何部位出现疼痛。',
          details: '运动过程中有疼痛，建议咨询专业医生。',
          images: [],
        },
      ],
    },
    {
      test_name: '肩部灵活性 (Shoulder Mobility)',
      purpose: '评估肩部的灵活性及潜在的肩部冲击问题。',
      method: '运动员双手握住木杆，尝试在不移动身体的情况下尽可能向后移动木杆。',
      scores: [
        {
          score: 3,
          criteria: '两拳之间的距离在一手长度内。',
          details: '肩部灵活性良好。',
          images: ['/images/DM_20241026073915_019.PNG'],
        },
        {
          score: 2,
          criteria: '两拳之间的距离在一手半长度内。',
          details: '肩部有轻微的灵活性不足。',
          images: ['/images/DM_20241026073915_020.PNG'],
        },
        {
          score: 1,
          criteria: '两拳之间的距离大于一手半长度。',
          details: '肩部灵活性不足，建议进行肩部灵活性训练。',
          images: ['/images/DM_20241026073915_021.PNG'],
        },
        {
          score: 0,
          criteria: '测试过程中身体任何部位出现疼痛。',
          details: '运动过程中有疼痛，建议咨询专业医生。',
          images: [],
        },
      ],
      clearing_test: {
        purpose: '排除肩部冲击（Impingement）的问题，以确保肩部灵活性测试的准确性。',
        method: '运动员将手掌放在对侧肩上，保持手掌与肩的接触，尽可能高地上抬肘部。',
        criteria: '如果在执行清除测试时出现疼痛或无法完成动作，则得分为0分。',
        images: ['/images/DM_20241026073915_022.PNG'],
        details:
          '肩夹击测试是必需的，因为仅仅采用肩部灵活性测试本身，有时不能发现肩部的冲击。通过此测试可以更准确地评估肩部是否存在潜在的冲击问题，从而确保整体测试的有效性。',
      },
    },
    {
      test_name: '主动直腿抬高 (Active Straight Leg Raise)',
      purpose: '评估下肢的灵活性和骨盆的稳定性。',
      method: '运动员平躺，双腿伸直，主动抬起一条腿尽可能高，同时保持另一条腿平放不动。',
      scores: [
        {
          score: 3,
          criteria: '踝关节位于大腿中部与髂前上棘（ASIS）之间。',
          details: '良好的下肢灵活性和骨盆稳定性。',
          images: ['/images/DM_20241026073915_023.PNG'],
        },
        {
          score: 2,
          criteria: '踝关节位于大腿中部与膝关节线之间。',
          details: '轻微的灵活性不足。',
          images: ['/images/DM_20241026073915_024.PNG'],
        },
        {
          score: 1,
          criteria: '踝关节位于膝关节线以下。',
          details: '建议进行下肢灵活性和骨盆稳定性的训练。',
          images: ['/images/DM_20241026073915_025.PNG'],
        },
        {
          score: 0,
          criteria: '测试过程中身体任何部位出现疼痛。',
          details: '运动过程中有疼痛，建议咨询专业医生。',
          images: [],
        },
      ],
    },
    {
      test_name: '躯干稳定性俯卧撑 (Trunk Stability Push-Up)',
      purpose: '评估核心稳定性和上肢力量。',
      method: '运动员进入标准俯卧撑姿势，完成规定次数的俯卧撑动作。',
      scores: [
        {
          score: 3,
          criteria:
            '在规定姿势下能很好的完成动作1次：男运动员的拇指与前额在一条线上。女运动员拇指与下颌成一条线。',
          details: '良好的核心稳定性。',
          images: ['/images/DM_20241026073915_026.PNG','/images/DM_20241026073915_027.PNG'],
        },
        {
          score: 2,
          criteria:
            '在降低难度的姿势下能完成动作1次。男运动员的拇指与下颌在一条线上。女运动员拇指与锁骨成一条线。',
          details: '核心稳定性一般。',
          images: ['/images/DM_20241026073915_028.PNG'],
        },
        {
          score: 1,
          criteria: '在降低难度的姿势下也无法完成动作或者出现动作代偿。',
          details: '建议进行核心稳定性训练。',
          images: [ '/images/DM_20241026073915_029.PNG', '/images/DM_20241026073915_030.PNG'],
        },
        {
          score: 0,
          criteria: '测试过程中身体任何部位出现疼痛。',
          details: '运动过程中有疼痛，建议咨询专业医生。',
          images: [],
        },
      ],
      clearing_test: {
        purpose: '排除脊柱伸展相关的疼痛或功能障碍，确保躯干稳定性俯卧撑测试的准确性。',
        method:
          '从俯撑动作开始姿势撑起上体，使脊柱充分伸展，观察是否有疼痛或不适。',
        criteria: '如果在执行脊柱伸展清除测试时出现疼痛，则得分为0分。',
        images: ['/images/DM_20241026073915_031.PNG'],
        details:
          '脊柱伸展清除测试用于确保在进行躯干稳定性俯卧撑测试时，运动员的脊柱不会因测试动作而引发疼痛或加剧现有的脊柱问题。这有助于更准确地评估核心稳定性。',
      },
    },
    {
      test_name: '躯干旋转稳定性 (Rotary Stability)',
      purpose: '评估核心的旋转稳定性和协调性。',
      method: '运动员进入四点支撑姿势，交替抬起对侧的手和脚，保持躯干稳定。',
      scores: [
        {
          score: 3,
          criteria: '运动员进行重复动作时躯干与木板保持平行；肘和膝接触时同木板在同一线上。',
          details: '正确完成单侧重复动作，保持平衡，显示出良好的核心稳定性和协调性。',
          images: ['/images/DM_20241026073915_032.PNG', '/images/DM_20241026073915_033.PNG'],
        },
        {
          score: 2,
          criteria: '运动员能够以异侧对角的形式正确完成动作。',
          details: '无法正确完成单侧动作，但保持平衡，建议加强核心控制能力。',
          images: ['/images/DM_41026073915_034.PNG', '/images/DM_41026073915_035.PNG'],
        },
        {
          score: 1,
          criteria: '失去平衡或者不能正确完成动作。',
          details: '无法完成单侧动作，失去平衡，建议进行核心稳定性和协调性的训练。',
          images: ['/images/DM_41026073915_036.PNG', '/images/DM_41026073915_037.PNG'],
        },
        {
          score: 0,
          criteria: '测试过程中身体任何部位出现疼痛。',
          details: '运动过程中有疼痛，建议咨询专业医生。',
          images: [],
        },
      ],
      clearing_test: {
        purpose: '排除脊柱屈曲相关的疼痛或功能障碍，确保躯干旋转稳定性测试的准确性。',
        method:
          '从四点支撑姿势开始，然后后移上体，使臀部接触双脚的脚跟、胸部接触双腿的大腿。双手保持在身体前方，尽量向远处伸出。',
        criteria: '如果在执行脊柱屈曲清除测试时出现疼痛，则得分为0分。',
        images: ['/images/DM_20241026073915_038.PNG'],
        details:
          '脊柱屈曲清除测试用于确保在进行躯干旋转稳定性测试时，运动员的脊柱不会因测试动作而引发疼痛或加剧现有的脊柱问题。这有助于更准确地评估核心旋转稳定性。',
      },
    },
  ],
};

export default data;

================
File: src/styles/App.css
================
/* src/styles/App.css */

/* CSS Variables for consistent styling */
:root {
  --color-primary: #007bff;
  --color-primary-hover: #0056b3;
  --color-secondary: #17a2b8;
  --color-secondary-hover: #138496;
  --color-white: #ffffff;
  --color-light-gray: #f9f9f9;
  --color-dark-gray: #333333;
  --border-radius-small: 4px;
  --border-radius-medium: 8px;
  --spacing-xs: 4px;
  --spacing-sm: 8px;
  --spacing-md: 16px;
  --spacing-lg: 20px;
  --font-size-base: 14px;
  --font-size-medium: 16px;
  --transition-speed: 0.3s;
}

/* 通用样式 */
body {
  font-family: 'Helvetica Neue', Arial, sans-serif;
  margin: 20px; /* 从 index.css 移除，统一在 App.css */
  padding: 0;
  color: #333;
  background-color: #f9f9f9;
}

h1,
h2,
h3 {
  font-weight: 600;
  color: #333;
}

a {
  color: #007bff;
  text-decoration: none;
}

ul {
  list-style-type: none;
  padding: 0;
}

li {
  margin-bottom: 10px;
}

label {
  cursor: pointer;
}

button {
  background-color: #007bff;
  color: #fff;
  border: none;
  padding: 12px 24px;
  margin: 16px 0; /* 从 index.css 移除，统一在 App.css */
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  font-size: 1rem;
}

button:hover {
  background-color: #0056b3;
}

button:focus {
  outline: 2px solid var(--color-primary-hover);
  outline-offset: 2px;
}

input[type="radio"]:focus + label {
  outline: 2px solid var(--color-primary-hover);
  outline-offset: 2px;
}

/* 个人信息表单样式 */
.personal-info-form {
  max-width: 600px;
  margin: 40px auto;
  padding: 40px;
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.personal-info-form h1 {
  margin-bottom: 24px;
  text-align: center;
}

.form-group {
  margin-bottom: 16px;
}

.form-group label {
  display: block;
  margin-bottom: 8px;
  font-weight: 500;
}

.form-group input,
.form-group select {
  width: 100%;
  padding: 8px;
  box-sizing: border-box;
  border: 1px solid #ccc;
  border-radius: 4px;
}

/* 测试页面样式 */
.app-container {
  max-width: 800px;
  margin: 20px auto;
  padding: 0 20px;
}

.test-container {
  padding: var(--spacing-lg);
  background-color: var(--color-light-gray);
  border-radius: var(--border-radius-medium);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  max-width: 800px;
  margin: 0 auto;
}

.test-container h2 {
  margin-bottom: 16px;
  text-align: center;
}

.test-header {
  display: flex;
  align-items: center;
  margin-bottom: var(--spacing-md);
}

.test-header .test-title {
  flex: 7;
  margin: 0;
}

.test-header .how-to-button {
  flex: 1;
}

.test-container ul {
  list-style: none;
  padding: 0;
}

.test-container li {
  margin-bottom: 12px;
}

.test-container label {
  cursor: pointer;
}

.test-container .button-group {
  display: flex;
  justify-content: space-between;
  margin-top: 20px;
}

.test-container button {
  padding: 10px 20px;
  flex: 1;
  margin: 0 5px;
}

/* 进度条样式 */
.progress-bar-container {
  width: 100%;
  background-color: #e9ecef;
  border-radius: 4px;
  margin-bottom: 20px;
  overflow: hidden;
  height: 20px;
}

.progress-bar {
  height: 100%;
  background-color: #007bff;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #fff;
  font-size: 12px;
  transition: width 0.3s ease;
}

/* 总结页面样式 */
.summary-container {
  max-width: 800px;
  margin: 40px auto;
  padding: 40px;
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.summary-container .personal-info p {
  margin: 8px 0;
  font-size: 16px;
}

.summary-container .results-chart {
  margin: 24px 0;
}

.summary-container .results-table {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: 24px;
}

.summary-container .results-table th,
.summary-container .results-table td {
  border: 1px solid #ddd;
  padding: 12px 16px;
  text-align: left;
}

.summary-container .results-table th {
  background-color: #f2f2f2;
  font-weight: 600;
}

.summary-container .results-table tr:nth-child(even) {
  background-color: #f9f9f9;
}

.summary-container .evaluation {
  margin-top: 24px;
}

.summary-container .evaluation p {
  margin: 12px 0;
  font-size: 16px;
}

/* 按钮组样式 */
.button-group {
  display: flex;
  justify-content: space-between;
  margin-top: 20px;
}

.button-group button {
  padding: 10px 20px;
  flex: 1;
  margin: 0 5px;
}

/* Modal 组件样式 */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modal-content {
  background-color: #fff;
  padding: 24px;
  border-radius: 8px;
  position: relative;
  max-width: 600px;
  width: 90%;
  max-height: 80%;
  overflow-y: auto;
}

.modal-close-button {
  position: absolute;
  top: 12px;
  right: 16px;
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
}

.modal-body {
  margin-top: 16px;
}

.modal-body img {
  max-width: 100%;
  height: auto;
  margin-top: 16px;
  border-radius: 4px;
}

.modal-images {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  margin-top: var(--spacing-md);
}

.modal-images img {
  max-width: 100%;
  height: auto;
  margin: var(--spacing-xs);
  border-radius: var(--border-radius-small);
}

/* 按钮样式调整 */
.how-to-button,
.details-button {
  background-color: #f9f9f9; /* 背景色改为白色 */
  color: #007bff; /* 图标颜色改为蓝色 */
  border: 1px solid #007bff; /* 添加蓝色边框以保持按钮可见性 */
  padding: 8px;
  border-radius: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background-color 0.3s ease, color 0.3s ease;
}

.how-to-button:hover,
.details-button:hover {
  background-color: #e6f0ff; /* 悬停时背景色稍微变浅 */
}

.how-to-button svg,
.details-button svg {
  color: #007bff; /* 确保图标颜色为蓝色 */
}

/* Score Item 样式 */
.score-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  flex-wrap: nowrap; /* 防止换行 */
  margin-bottom: 12px;
}

.score-label {
  flex: 7; 
  display: flex;
  align-items: center;
}

.score-label input {
  margin-right: 8px; /* 调整输入框与文字的间距 */
}

.details-button {
  flex: 1; 
  padding: 8px; /* 调整按钮内边距 */
  display: flex;
  align-items: center;
  justify-content: center;
}

/* 清除测试部分 */
.clearing-test-section {
  margin-top: var(--spacing-md);
  padding-top: var(--spacing-md);
  border-top: 1px solid #e0e0e0;
}

.clearing-test-header {
  display: flex;
  align-items: center;
  margin-bottom: var(--spacing-xs);
}

.clearing-test-header h3 {
  flex: 7;
  margin: 0;
  font-size: 1.25rem;
  color: var(--color-dark-gray);
}

.clearing-test-header .details-button {
  flex: 1;
}

.clearing-test-options {
  display: flex;
  gap: var(--spacing-lg);
  margin-top: var(--spacing-xs);
}

.clearing-test-options label {
  display: flex;
  align-items: center;
  gap: var(--spacing-xs);
  font-size: var(--font-size-base);
  color: var(--color-dark-gray);
}

.clearing-test-options input {
  margin: 0;
}

/* 结果可视化样式 */
.score-visualization {
  margin: 24px 0;
}

.score-visualization h3 {
  margin-bottom: 16px;
  font-size: 1.25rem;
  color: var(--color-dark-gray);
}

.score-visualization .score-bar {
  display: flex;
  align-items: center;
  margin-bottom: 12px;
}

.score-visualization .score-bar .label {
  flex: 2;
  font-size: 1rem;
  color: var(--color-dark-gray);
}

.score-visualization .score-bar .bar-container {
  flex: 7;
  background-color: #e0e0e0;
  border-radius: 4px;
  overflow: hidden;
  height: 20px;
  margin-right: 8px;
}

.score-visualization .score-bar .bar {
  height: 100%;
  background-color: #007bff;
  width: 0%;
  transition: width 0.5s ease;
}

.score-visualization .score-bar .score {
  flex: 1;
  font-size: 0.9rem;
  color: var(--color-dark-gray);
}

/* 确保条形图在加载时根据分数宽度 */
.summary-container.loaded .bar {
  /* 动态宽度将通过 React 设置内联样式 */
}

/* 卡片式布局 */
.results-cards {
  display: none; /* 默认隐藏，仅在移动端显示 */
}

@media (max-width: 768px) {
  .results-table {
    display: none; /* 隐藏表格 */
  }

  .results-cards {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .result-card {
    background-color: #f9f9f9;
    padding: 16px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .result-card h4 {
    margin-bottom: 8px;
    font-size: 1.1rem;
    color: var(--color-dark-gray);
  }

  .result-card p {
    margin: 4px 0;
    font-size: 0.95rem;
    color: #555;
  }

  .result-card .details-button {
    margin-top: 8px;
    padding: 6px 12px;
    font-size: 0.9rem;
  }
}

/* 错误消息样式 */
.error-message {
  background-color: #f8d7da;
  color: #721c24;
  padding: 12px 16px;
  border: 1px solid #f5c6cb;
  border-radius: 4px;
  margin-bottom: 16px;
}

/* 通知样式 */
.notification {
  position: fixed;
  top: 20px;
  right: 20px;
  padding: 12px 16px;
  border-radius: 4px;
  color: #fff;
  z-index: 1001;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  animation: fadein 0.5s, fadeout 0.5s 2.5s;
}

.notification.error {
  background-color: #f44336; /* 红色 */
}

.notification.success {
  background-color: #4caf50; /* 绿色 */
}

.notification.info {
  background-color: #2196f3; /* 蓝色 */
}

@keyframes fadein {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes fadeout {
  from { opacity: 1; }
  to { opacity: 0; }
}

================
File: src/utils/markdown.test.ts
================
// src/utils/markdown.test.ts

import { generateMarkdown } from './markdown';
import { TestResult, PersonalInfo, DominantHand, DominantFoot } from '../types';

describe('generateMarkdown', () => {
  const personalInfo: PersonalInfo = {
    name: '张三',
    testDate: '2024-10-27',
    dominantHand: DominantHand.Right, // 使用枚举值
    dominantFoot: DominantFoot.Left,  // 使用枚举值
    tester: '李四',
  };

  const resultsHighScore: TestResult[] = [
    { testName: '深蹲 (Deep Squat)', score: 3, clearingTest: null },
    { testName: '跨栏步 (Hurdle Step)', score: 3, clearingTest: null },
    { testName: '直线弓箭步 (Inline Lunge)', score: 3, clearingTest: null },
    { testName: '肩部灵活性 (Shoulder Mobility)', score: 3, clearingTest: null },
    { testName: '主动直腿抬高 (Active Straight Leg Raise)', score: 3, clearingTest: null },
  ];

  const resultsLowScore: TestResult[] = [
    { testName: '深蹲 (Deep Squat)', score: 2, clearingTest: null },
    { testName: '跨栏步 (Hurdle Step)', score: 2, clearingTest: false },
    { testName: '直线弓箭步 (Inline Lunge)', score: 1, clearingTest: null },
    { testName: '肩部灵活性 (Shoulder Mobility)', score: 0, clearingTest: true },
  ];

  const emptyResults: TestResult[] = [];

  test('generates correct markdown for totalScore >= 14', () => {
    const markdown = generateMarkdown(resultsHighScore, personalInfo);
    expect(markdown).toContain('**总分**：15 / 21');
    expect(markdown).toContain('您的总分高于14，受伤风险较低，请继续保持良好的运动状态。');
  });

  test('generates correct markdown for totalScore < 14', () => {
    const markdown = generateMarkdown(resultsLowScore, personalInfo);
    expect(markdown).toContain('**总分**：5 / 21');
    expect(markdown).toContain('您的总分低于14，存在较高的受伤风险，建议进行针对性的功能训练。');
    expect(markdown).toContain('- **直线弓箭步 (Inline Lunge)** 得分为1，建议加强该部位的功能训练。');
    expect(markdown).toContain('- **肩部灵活性 (Shoulder Mobility)** 过程中有疼痛，建议咨询专业医生。');
  });

  test('handles empty results', () => {
    const markdown = generateMarkdown(emptyResults, personalInfo);
    expect(markdown).toContain('**总分**：0 / 21');
    expect(markdown).toContain('您的总分低于14，存在较高的受伤风险，建议进行针对性的功能训练。');
  });
});

================
File: src/utils/markdown.ts
================
// src/utils/markdown.ts

import { TestResult, PersonalInfo } from '../types';

/**
 * 生成 FMS 评估结果的 Markdown 文本
 * @param results - 测试结果数组
 * @param personalInfo - 被测试者的个人信息
 * @param evaluationMessages - 每项测试的评价信息
 * @returns Markdown 格式的评估结果
 */
export const generateMarkdown = (
  results: TestResult[],
  personalInfo: PersonalInfo,
  evaluationMessages: { [key: string]: { [score: number]: string } }
): string => {
  const totalScore = results.reduce((sum, result) => sum + result.score, 0);
  let markdown = `# 红医师训练伤风险评估结果\n\n`;

  markdown += `**被测试者姓名**：${personalInfo.name}  \n`;
  markdown += `**测试时间**：${personalInfo.testDate}  \n`;
  markdown += `**优势手**：${personalInfo.dominantHand}  \n`;
  markdown += `**优势脚**：${personalInfo.dominantFoot}  \n`;
  markdown += `**测试者**：${personalInfo.tester}  \n`;
  markdown += `**总分**：${totalScore} / 21\n\n`;

  // 添加结果可视化表格
  markdown += `## 测试分数可视化\n\n`;
  markdown += `| 测试项目 | 得分 |\n`;
  markdown += `| -------- | ---- |\n`;
  results.forEach((result) => {
    // 使用 Unicode 方块表示得分
    const scoreBlocks = '█'.repeat(result.score) + '░'.repeat(3 - result.score);
    markdown += `| ${result.testName} | ${scoreBlocks} (${result.score}/3) |\n`;
  });
  markdown += `\n`;

  // 添加结果表格
  markdown += `## 测试结果\n\n`;
  markdown += `| 测试项目 | 得分 | 清除测试结果 |\n`;
  markdown += `| -------- | ---- | ------------ |\n`;
  results.forEach((result) => {
    markdown += `| ${result.testName} | ${result.score} | ${
      result.clearingTest === true
        ? '阳性（分数设为0）'
        : result.clearingTest === false
          ? '阴性'
          : '无'
    } |\n`;
  });
  markdown += `\n`;

  // 分析与建议部分
  markdown += `# 分析与建议\n\n`;
  if (totalScore < 14) {
    markdown += '- **您的总分低于14，存在较高的受伤风险，建议进行针对性的功能训练。**\n';
  } else {
    markdown += '- **您的总分高于14，受伤风险较低，请继续保持良好的运动状态。**\n';
  }

  // 添加每项测试的评价
  markdown += `\n`;
  results.forEach((result) => {
    const testName = result.testName;
    const score = result.score;
    const message = evaluationMessages[testName]?.[score];

    if (message) {
      markdown += `- **${testName}**：${message}\n`;
    }
  });

  markdown += `\n`;

  return markdown;
};

================
File: src/App.tsx
================
// src/App.tsx

import React, { useState, Suspense, lazy } from 'react';
import ProgressBar from './components/ProgressBar';
import data from './data/fmsData';
import { TestResult, PersonalInfo } from './types';
import './styles/App.css';
import { NotificationProvider } from './context/NotificationContext'; // 导入 NotificationProvider

// 使用 React.lazy 懒加载组件
const PersonalInfoForm = lazy(() => import('./components/PersonalInfoForm'));
const Test = lazy(() => import('./components/Test'));
const Summary = lazy(() => import('./components/Summary'));

const App: React.FC = () => {
  const [personalInfo, setPersonalInfo] = useState<PersonalInfo | null>(null);
  const [currentTestIndex, setCurrentTestIndex] = useState<number>(0);
  const [results, setResults] = useState<TestResult[]>([]);

  // 处理个人信息表单提交
  const handlePersonalInfoSubmit = (info: PersonalInfo): void => {
    setPersonalInfo(info);
  };

  // 处理每项测试的下一步操作
  const handleNext = (score: number, clearingTest: boolean | null): void => {
    if (!personalInfo) return;

    const testName = data.categories[currentTestIndex].test_name;
    const finalScore = clearingTest ? 0 : score;
    const newResult: TestResult = { testName, score: finalScore, clearingTest };
    const updatedResults: TestResult[] = [...results];
    updatedResults[currentTestIndex] = newResult; // 覆盖当前测试结果
    setResults(updatedResults);

    if (currentTestIndex < data.categories.length - 1) {
      setCurrentTestIndex(currentTestIndex + 1);
    } else {
      // 所有测试完成
      setCurrentTestIndex(-1);
    }
  };

  // 处理返回操作
  const handleBack = (): void => {
    if (currentTestIndex === 0) {
      setPersonalInfo(null); // 返回个人信息输入页
    } else {
      setCurrentTestIndex(currentTestIndex - 1);
    }
  };

  // 处理重新开始
  const handleRestart = (): void => {
    setPersonalInfo(null);
    setCurrentTestIndex(0);
    setResults([]);
  };

  return (
    <NotificationProvider> {/* 使用 NotificationProvider 包裹整个应用 */}
      <Suspense fallback={<div>加载中...</div>}>
        {!personalInfo ? (
          <PersonalInfoForm onSubmit={handlePersonalInfoSubmit} />
        ) : currentTestIndex === -1 ? (
          <Summary
            results={results}
            personalInfo={personalInfo}
            onRestart={handleRestart}
          />
        ) : (
          <div className="app-container">
            <ProgressBar progress={((currentTestIndex + 1) / data.categories.length) * 100} />
            <Test
              key={data.categories[currentTestIndex].test_name}
              test={data.categories[currentTestIndex]}
              onNext={handleNext}
              onBack={handleBack}
              existingResult={results[currentTestIndex] || null}
              isLastTest={currentTestIndex === data.categories.length - 1} // 新增 prop
            />
          </div>
        )}
      </Suspense>
    </NotificationProvider>
  );
};

export default App;

================
File: src/main.tsx
================
// src/main.tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './styles/App.css'; // 修改此行以使用统一的样式文件

const rootElement = document.getElementById('root');

if (rootElement) {
  const root = ReactDOM.createRoot(rootElement);
  root.render(
    <React.StrictMode>
      <App />
    </React.StrictMode>
  );
} else {
  console.error('Failed to find the root element.');
}

================
File: src/setupTests.ts
================
// src/setupTests.ts
import '@testing-library/jest-dom';

================
File: src/types.ts
================
// src/types.ts

// 使用枚举定义优势手和脚
export enum DominantHand {
  Left = '左手',
  Right = '右手',
}

export enum DominantFoot {
  Left = '左脚',
  Right = '右脚',
}

export interface ScoreCriteria {
  score: number;
  criteria: string;
  details: string;
  images: string[]; // 可选的图片数组
}

export interface ClearingTest {
  purpose: string;
  method: string;
  criteria: string;
  images: string[];
  details: string;
}

export interface TestItem {
  test_name: string;
  purpose: string; // 测试目的
  method: string;  // 测试方法
  scores: ScoreCriteria[];
  clearing_test?: ClearingTest;
}

export interface FMSData {
  title: string;
  categories: TestItem[];
}

export interface TestResult {
  testName: string;
  score: number;
  clearingTest: boolean | null;
}

export interface PersonalInfo {
  name: string;
  testDate: string;
  dominantHand: DominantHand;
  dominantFoot: DominantFoot;
  tester: string;
}

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Dependencies
node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Miscellaneous
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

================
File: eslint.config.js
================
import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from '@typescript-eslint/eslint-plugin';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [
      js.configs.recommended,
      ...tseslint.configs.recommended,
      'plugin:prettier/recommended'
    ],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      sourceType: 'module',
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
      '@typescript-eslint': tseslint
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
      "semi": ["error", "always"],
      "quotes": ["error", "single"],
      "@typescript-eslint/explicit-function-return-type": "off",
      "@typescript-eslint/no-explicit-any": "error",
      "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }]
    },
  }
);

================
File: index.html
================
<!doctype html>
<html lang="zh">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>红医师运动伤风险评估系统</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "fms-app",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "dev": "vite",
    "test": "jest",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "lint": "eslint 'src/**/*.{js,jsx,ts,tsx}'",
    "format": "prettier --write 'src/**/*.{js,jsx,ts,tsx,css,md}'"
  },
  "dependencies": {
    "@types/markdown-it": "^12.2.3",
    "lucide-react": "^0.453.0",
    "markdown-it": "^13.0.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-markdown": "^8.0.3",
    "react-tooltip": "^5.28.0"
  },
  "devDependencies": {
    "@testing-library/jest-dom": "^6.6.2",
    "@testing-library/react": "^16.0.1",
    "@types/jest": "^29.5.14",
    "@types/react": "^18.0.0",
    "@types/react-dom": "^18.0.0",
    "@typescript-eslint/eslint-plugin": "^5.0.0",
    "@typescript-eslint/parser": "^5.56.0",
    "@vitejs/plugin-react": "^4.3.2",
    "eslint": "^8.0.0",
    "eslint-config-prettier": "^8.8.0",
    "eslint-plugin-prettier": "^4.2.1",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.3.0",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "prettier": "^2.8.0",
    "ts-jest": "^29.2.5",
    "typescript": "^4.6.3",
    "vite": "^5.4.9"
  },
  "prettier": {
    "semi": true,
    "singleQuote": true,
    "trailingComma": "all",
    "printWidth": 80,
    "tabWidth": 2,
    "endOfLine": "auto"
  },
  "jest": {
    "setupFilesAfterEnv": [
      "<rootDir>/src/setupTests.ts"
    ],
    "testEnvironment": "jsdom",
    "transform": {
      "^.+\\.(ts|tsx)$": "ts-jest"
    },
    "moduleNameMapper": {
      "\\.(css|less)$": "identity-obj-proxy"
    }
  }
}

================
File: README.md
================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["DOM", "DOM.Iterable", "ES2017"],
    "allowJs": false,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true, // 启用严格模式
    "forceConsistentCasingInFileNames": true,
    "module": "ESNext",
    "moduleResolution": "Node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": ["src"]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
});
